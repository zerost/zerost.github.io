{"hash":"08c8e77e5a5321ae3040b0740528b4fa6a67eda8","data":null,"context":{"data":{"name":"Vue3","postList":[{"id":"505811fab357630089775ae32ea5d7eb","title":"Vue3 script setup","content":"<h1 id=\"1-script-setup란\"><a href=\"#1-script-setup%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. &#x3C;script setup>란?</h1>\n<p>&#x3C;script setup>은 SFC(Single File Components)내에서 Composition API를 사용하기 위해서 권장되는 구문이다. &#x3C;script> 구문에 비해 몇가지 나은점을 제공한다.</p>\n<p>공식사이트에는 아래와 같은 내용이 있다.</p>\n<ul>\n<li>More succinct code with less boilerplate</li>\n<li>Ability to declare props and emitted events using pure TypeScript</li>\n<li>Better runtime performance (the template is compiled into a render function in the same scope, without an intermediate proxy)</li>\n<li>Better IDE type-inference performance (less work for the language -server to extract types from code)</li>\n</ul>\n<p>개인적으로 느낀바로는 변수나 객체등을 또 다시 return 구문에 입력하지 않아도 됨으로서, return 구문이 비대해지거나 return 기입시 오타등으로 인해서 예기치 않는 오류만 발생하지 않는 것 만으로도 매우 훌륭하다고 느낀다. 코드도 훨씬 깔끔해진다.</p>\n<h1 id=\"2-composition-api와-script-setup-비교\"><a href=\"#2-composition-api%EC%99%80-script-setup-%EB%B9%84%EA%B5%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Composition API와 &#x3C;script setup> 비교</h1>\n<h2 id=\"composition-api\"><a href=\"#composition-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Composition API</h2>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"increment\"</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> reactive <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// don't forget to expose the function as well.</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">,</span>\n      increment\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"script-setup\"><a href=\"#script-setup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>&#x3C;script setup></h2>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> reactive <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"increment\"</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>단순히 count만 증가시키는 모듈이지만 코드 라인수도 줄어들고, 간결하다. &#x3C;script setup>에서 선언한 변수나 함수를 return할 필요 없이 template에서 바로 사용할 수 있다. 변수가 한개 인데도 코드가 많이 줄어든다. 변수 갯수만큼 라인수가 늘어나는거라 복잡도가 높은 변수가 많은 프로그램일수록 소스가 간결해지는 효과는 좋다.</p>\n<h1 id=\"3-using-components\"><a href=\"#3-using-components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Using Components</h1>\n<p>컴포넌트 사용법. 컴포넌트 사용법도 정말 간단하다 단순하게 import만 해주게 되면 template에서 사용 할 수 있다. 기존 Composition API보다 간결하다.</p>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">MyComponent</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./MyComponent.vue'</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">MyComponent</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"dynamic-components\"><a href=\"#dynamic-components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dynamic Components</h2>\n<p>동적으로 조건에따라서 컴포넌트 사용</p>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Foo</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Foo.vue'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Bar</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Bar.vue'</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"Foo\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"someCondition ? Foo : Bar\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"recursive-components\"><a href=\"#recursive-components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Recursive Components</h2>\n<p>컴포넌트 이름이 동일하거나 이름을 변경이 필요하다면 아래와 같이 사용할 수 있다.</p>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">FooBar</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">FooBarChild</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./components'</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<h1 id=\"4-top-level-await\"><a href=\"#4-top-level-await\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Top-level await</h1>\n<p>await 문법도 사용가능하다. 다만, Suspense와 함께 사용되어야 한다.</p>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/post/1</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> r<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"5-typescript-기능\"><a href=\"#5-typescript-%EA%B8%B0%EB%8A%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. TypeScript 기능</h1>\n<p>타입 스크립트도 지원한다. </p>\n<h2 id=\"type-only-propsemit-declarations\"><a href=\"#type-only-propsemit-declarations\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Type-only props/emit declarations</h2>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> defineProps<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> string\n  bar<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> emit <span class=\"token operator\">=</span> defineEmits<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token string\">'update'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"default-props-values-when-using-type-declaration\"><a href=\"#default-props-values-when-using-type-declaration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Default props values when using type declaration</h2>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  msg<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string\n  labels<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token function\">withDefaults</span><span class=\"token punctuation\">(</span>defineProps<span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Props</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">labels</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"6-마치며\"><a href=\"#6-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. 마치며</h1>\n<p>Vue.js 3를 사용하고 있다면 무조건 적용해야 하는 것 같다. 토이프로젝트에  모듈들이 Composition API로 적용되어 있었다. &#x3C;script setup> 부분으로 하나씩 고쳐가고 있는데, 별도로 시간을 들여서 수정할만 하다. 소스가 간결해지는 부분이 참으로 만족스럽다. </p>\n<h1 id=\"9-참조\"><a href=\"#9-%EC%B0%B8%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>9. 참조</h1>\n<ul>\n<li><a href=\"https://vuejs.org/api/sfc-script-setup.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">&#x3C;script setup> - Vue.js 공식사이트</a>  </li>\n<li><a href=\"https://vuejs.org/guide/introduction.html#api-styles\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">API styles - Vue.js 공식사이트</a></li>\n</ul>\n","category":["FrontEnd","Vue3"]},{"id":"f2d3dcd5d04ec8eaab84d8a870d01cbf","title":"Vue CLI 빌드시 public 폴더 하위 특정폴더 제외하기","content":"<h1 id=\"배경\"><a href=\"#%EB%B0%B0%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>배경</h1>\n<p>Vue.js CLI에서 빌드시 public 폴더중에 일부 폴더는 제외를 하고 싶었다. 이유는 해당 폴더는 파일업로드가 되는 폴더라서\n굳이 빌드할때 copy가 될 필요는 없었다. 그래서 해당 방법을 한참 찾았다. 그리고는 결국 찾아내고 말았다.</p>\n<h1 id=\"환경\"><a href=\"#%ED%99%98%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>환경</h1>\n<p>Vue CLI: 4.5.17</p>\n<h1 id=\"진행\"><a href=\"#%EC%A7%84%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>진행</h1>\n<p>vue.config.js 파일에 아래부분을 추가한다.</p>\n<pre class=\"language-json line-numbers\"><code class=\"language-json\">module.exports = <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  chainWebpack<span class=\"token operator\">:</span> config => <span class=\"token punctuation\">{</span>\n    config.plugin('copy').tap((<span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span>) => <span class=\"token punctuation\">{</span>\n      options<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.ignore.push('files<span class=\"token comment\">/**')\n      return [options]\n    })\n  }\n  //...\n}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h1>\n<p>해당 files/** 에 해당하는 부분에 제외하고자 하는 폴더를 넣고 빌드하니 정상 제외된다.</p>\n","category":["FrontEnd","Vue3"]},{"id":"88f16e93d454fd860827533a02bc5e96","title":"vue-router 개발자 도구에서 오류","content":"<h2 id=\"오류\"><a href=\"#%EC%98%A4%EB%A5%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[오류]</h2>\n<h3 id=\"환경\"><a href=\"#%ED%99%98%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>환경</h3>\n<p>OS: Windows 10<br>\nVue: 3.2.31<br>\nVue router: 4.0.14  </p>\n<hr>\n<p>vue를 브라우저 개발자 도구(devtools)를 실행시키고 실행하다보면 아래와 같은 오류가 발생한 경우가 나온다.<br>\n(개발자 도구를 실행하지 않은 경우는 발생하지 않음)</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\">vue-router.esm-bundler.js?6c02:2489 Uncaught <span class=\"token punctuation\">(</span>in promise<span class=\"token punctuation\">)</span> TypeError: api.now is not a <span class=\"token keyword\">function</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<h2 id=\"원인확인\"><a href=\"#%EC%9B%90%EC%9D%B8%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[원인확인]</h2>\n<p>버전 문제 이지 않을까 검색을 해보았다. 검색 해본 결과 버전문제가 맞는 듯 했다.</p>\n<h2 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[결론]</h2>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> remove vue-router\nyear <span class=\"token function\">add</span> vue-router@4.0.13<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<p>검색한 내용을 토대로 버전을 이전버전으로 돌리니 개발자도구(devtools)에서도 오류 없이 정상적으로 작동했다.</p>\n<h2 id=\"참고자료\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[참고자료]</h2>\n<p><a href=\"https://github.com/vuejs/router/issues/1338\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Router not working on 4.0.14 -> Use the vue-devtools stable to solve this #1338</a></p>\n","category":["FrontEnd","Vue3"]}]}}}