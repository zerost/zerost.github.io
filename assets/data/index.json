{"hash":"20dc515c1f68fa4d05536f62e08c4756a1adab2e","data":{"posts":{"edges":[{"node":{"id":"febfe5f5278b4bb995c4e3e07d5af29d","title":"부팅시 VERR_INTNET_FLT_IF_NOT_FOUND 오류","content":"<h1 id=\"1-배경\"><a href=\"#1-%EB%B0%B0%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 배경</h1>\n<p>윈도우에서 VirtualBox를 통해서 리눅스를 설치하고 사용하고 있다. 그런데, 윈도우 업데이트 이후 리눅스 부팅시 아래의 메시지가 뜨면서 부팅이 되지 않는다.</p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">가상 머신 ubuntu-20의 세션을 열 수 없습니다.\n\nFailed to open/create the internal network &#39;HostInterfaceNetworking-VirtualBox Host-Only Ethernet Adapter&#39; (VERR_INTNET_FLT_IF_NOT_FOUND).\n\nFailed to attach the network LUN (VERR_INTNET_FLT_IF_NOT_FOUND).\n\n결과 코드: E_FAIL (0x80004005)\n구성 요소: ConsoleWrap\n인터페이스: IConsole {872da645-4a9b-1727-bee2-5585105b9eed}<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"--환경\"><a href=\"#--%ED%99%98%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>- 환경</h3>\n<p>Host: Windows 11 22H2</p>\n<h1 id=\"2-원인-해결책\"><a href=\"#2-%EC%9B%90%EC%9D%B8-%ED%95%B4%EA%B2%B0%EC%B1%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 원인, 해결책</h1>\n<p>원인은 아직 찾지 못했으나, 검색해본 결과 나와 같은 케이스가 있었다. 해당 블로그에서는 새로 네트워크를 생성해주니 된다고 포스팅 되어있다.\n그런데 시스템을 깔끔하게 싶어서 기존에 있는 네트워크를 삭제하고, 다시 생성해서 부팅했는데 되지 않았다. 그래서 블로그에 적힌대로 안되는 어댑터를 냅두고\n어댑터를 추가 생성했더니 정상 부팅된다.</p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">VirtualBox &gt; 파일 &gt; 호스트 네트워크 관리자(H) &gt; 만들기(C) <span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<p>IP관련해서 수정이 필요하면 속성(P)을 눌러서 정보를 변경해주면 된다. 그리고 확인을 누르면 어댑터 생성 완료.  </p>\n<p>그리고</p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">왼쪽 &gt; VM선택 (ex: ubuntu-20) &gt; 설정(S) &gt; 네트워크 <span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<p>메뉴들어가서 호스트 전용 어댑터 선택되어있는 탭을 찾아서 새로 만들어놓은 어댑터 선택하면 완료.<br>\n그리고 부팅하면 정상 부팅 완료.</p>\n<p><img src=\"/img/ko/2022/20221009001.png\" alt=\"어댑터 생성\"></p>\n<h1 id=\"3-결론\"><a href=\"#3-%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 결론</h1>\n<p>위에도 작성했지만 원인은 아직 찾지 못했다. 윈도우 업데이트 할때마다 이런 경우가 자주 발생한다면 원인을 찾긴 해야겠다. 하지만, 지금은 해결되었으니 이번에는 해결하는걸로 패스.</p>\n<h1 id=\"9-참조\"><a href=\"#9-%EC%B0%B8%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>9. 참조</h1>\n<p><a href=\"https://wnw1005.tistory.com/224\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">버추얼박스(VirtualBox) 호스트 네트워크 관련 VERR_INTNET_FLT_IF_NOT_FOUND 오류</a>  </p>\n","lang":"ko","category":["Linux","VirtualBox"],"date":"2022-10-09T11:23:00.000Z"}},{"node":{"id":"bf89579966bacedfefa97d17ea28abf6","title":"git checkout를 switch restore로 대체하기","content":"<h1 id=\"1-배경\"><a href=\"#1-%EB%B0%B0%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 배경</h1>\n<p>git에 사용법이 그리 익숙치가 않아서, branch이동이나 복구등등을 찾다보니 git checkout 기능이 switch, restore로 분리되어서 새 기능이 추가 되었다고 한다. 사유는 checkout 하나의 명령어에 기능이 많기 때문이라고 한다.\n그 동안 checkout으로 사용해왔는데, 명확하기 위해서 분리했다고 하니 새로운 기능을 사용하는 것이 좋을 것 같다. </p>\n<h1 id=\"2-switch\"><a href=\"#2-switch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. switch</h1>\n<p>branch 이동</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> switch master\nSwitched to branch <span class=\"token string\">'master'</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<p>branch HEAD기반 생성</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> switch -c new-branch\nSwitched to a new branch <span class=\"token string\">'new-branch'</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<p>branch 특정commit기반 생성 </p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">git</span> switch -c new-branch3 67b7c2d\nSwitched to a new branch <span class=\"token string\">'new-branch3'</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<p>branch Reset<br>\n※ 브랜치 리셋을 하는 기능이 있긴한데, 이게 권고되는건지는 확인필요</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> switch --force-create new-branch   \nReset branch <span class=\"token string\">'new-branch'</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<p><a href=\"https://git-scm.com/docs/git-switch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">git-switch reference</a></p>\n<h1 id=\"3-restore\"><a href=\"#3-restore\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. restore</h1>\n<p>HEAD로 restore </p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> restore test.md<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<p>stage에 올라간 파일 제외하기</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">git</span> restore --staged test.md<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<p><a href=\"https://git-scm.com/docs/git-restore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">git-restore reference</a></p>\n<h1 id=\"4-결론\"><a href=\"#4-%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. 결론</h1>\n<p>git checkout보다는 switch, restore로 구분해서 사용하자. 그리고 해당 명령어에 전체 기능을 정리한게 아니기 때문에 다른 기능이 더 필요하다면 레퍼런스를 참조해서 진행하자. 기능을 하나씩 습득할때마다 그때마다 정리를 하자.</p>\n<h1 id=\"참조\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>참조</h1>\n<ul>\n<li><a href=\"https://blog.outsider.ne.kr/1505\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">새 버전에 맞게 git checkout 대신 switch/restore 사용하기 - Outsider's Dev Story</a></li>\n<li><a href=\"https://git-scm.com/docs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Git reference</a></li>\n</ul>\n","lang":"ko","category":["Git"],"date":"2022-10-01T08:09:00.000Z"}},{"node":{"id":"44b04985ddf818570083ef9f1843d2ba","title":"SpringBoot Web MVC DELETE","content":"<h1 id=\"delete의개념\"><a href=\"#delete%EC%9D%98%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DELETE의개념</h1>\n<p>HTTP DELETE 메서드는 지정한 리소스를 삭제합니다.</p>\n<h2 id=\"예제\"><a href=\"#%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예제</h2>\n<h3 id=\"요청\"><a href=\"#%EC%9A%94%EC%B2%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>요청</h3>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">DELETE /file.html HTTP/1.1<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<h3 id=\"응답\"><a href=\"#%EC%9D%91%EB%8B%B5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>응답</h3>\n<ul>\n<li>아마도 명령을 성공적으로 수행할 것 같으나 아직은 실행하지 않은 경우 202 (Accepted) 상태 코드.</li>\n<li>명령을 수행했고 더 이상 제공할 정보가 없는 경우 204 (No Content) 상태 코드.</li>\n<li>명령을 수행했고 응답 메시지가 이후의 상태를 설명하는 경우 200 (OK) 상태 코드.</li>\n</ul>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">HTTP/1.1 200 OK\nDate: Wed, 21 Oct 2015 07:28:00 GMT\n\n&lt;html&gt;\n  &lt;body&gt;\n    &lt;h1&gt;File deleted.&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"kotlin---springboot\"><a href=\"#kotlin---springboot\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kotlin - SpringBoot</h1>\n<h2 id=\"controller-예제\"><a href=\"#controller-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Controller 예제</h2>\n<pre class=\"language-Kotlin line-numbers\"><code class=\"language-Kotlin\">@RestController\n@RequestMapping(\"/api\")\nclass DeleteApiController {\n\n    // URL : /api/delete-mapping?name=test&age=22\n    @DeleteMapping(path = [\"/delete-mapping\"])\n    fun deleteMapping(\n        @RequestParam(value = \"name\") _name : String,\n        @RequestParam(value = \"age\") _age : Int,\n    ): String {\n        println(_name)\n        println(_age)\n        return _name + \" \" + _age\n    }\n\n    // URL : /api/delete-mapping/name/{name}/age/{age}\n    @DeleteMapping(path = [\"/delete-mapping/name/{name}/age/{age}\"])\n    fun deleteMappingPath(\n        @PathVariable(value = \"name\") _name : String,\n        @PathVariable(value = \"age\") _age : Int,\n    ): String {\n        println(_name)\n        println(_age)\n        return _name + \" \" + _age\n    }\n}<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"출처\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>출처</h1>\n<ul>\n<li>DELETE의 개념, 예제 - <a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Methods/DELETE\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Web/HTTP/Methods/DELETE</a>  </li>\n<li>인프런: 스프링부트-코틀린 - <a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-%EC%BD%94%ED%8B%80%EB%A6%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-%EC%BD%94%ED%8B%80%EB%A6%B0</a></li>\n</ul>\n","lang":"ko","category":["Kotlin","SpringBoot"],"date":"2022-09-19T10:25:00.000Z"}},{"node":{"id":"1cebe7f1ec36075dce004aa0ac9acaac","title":"SpringBoot Web MVC PUT","content":"<h1 id=\"put의개념\"><a href=\"#put%EC%9D%98%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Put의개념</h1>\n<p>HTTP PUT 메서드는 요청 페이로드를 사용해 새로운 리소스를 생성하거나, 대상 리소스를 나타내는 데이터를 대체합니다.\nPUT과 POST의 차이는 멱등성으로, PUT은 멱등성을 가집니다. PUT은 한 번을 보내도, 여러 번을 연속으로 보내도 같은 효과를 보입니다. 즉, 부수 효과가 없습니다.  </p>\n<p>※ 멱등성<br>\n동일한 요청을 한 번 보내는 것과 여러 번 연속으로 보내는 것이 같은 효과를 지니고, 서버의 상태도 동일하게 남을 때, 해당 HTTP 메서드가 멱등성을 가졌다고 말합니다.\n다른 말로는, 멱등성 메서드에는 통계 기록 등을 제외하면 어떠한 부수 효과(side effect)도 존재해서는 안됩니다.\n올바르게 구현한 경우 GET, HEAD, PUT, DELETE 메서드는 멱등성을 가지며, POST 메서드는 그렇지 않습니다. 모든 안전한 메서드는 멱등성도 가집니다.</p>\n<h2 id=\"예제\"><a href=\"#%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예제</h2>\n<h3 id=\"요청\"><a href=\"#%EC%9A%94%EC%B2%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>요청</h3>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">PUT /new.html HTTP/1.1\nHost: example.com\nContent-type: text/html\nContent-length: 16\n\n&lt;p&gt;New File&lt;/p&gt;<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"응답\"><a href=\"#%EC%9D%91%EB%8B%B5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>응답</h3>\n<p>데이터가 생성된 경우 </p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">HTTP/1.1 201 Created\nContent-Location: /new.html<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<p>데이터가 없는경우는 200(OK) 또는 204(No Content) 응답</p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">HTTP/1.1 204 No Content\nContent-Location: /existing.html<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<h1 id=\"kotlin---springboot\"><a href=\"#kotlin---springboot\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kotlin - SpringBoot</h1>\n<h2 id=\"controller-예제\"><a href=\"#controller-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Controller 예제</h2>\n<pre class=\"language-Kotlin line-numbers\"><code class=\"language-Kotlin\">@RestController\n@RequestMapping(\"/api\")\nclass PutApiController {\n\n    //비추천 - @PutMapping 사용\n    @RequestMapping(method = [RequestMethod.PUT], path = [\"/request-mapping\"])\n    fun requestMapping(): String{\n        return \"request-mapping - put method\"\n    }\n\n\n    //추천\n    @PutMapping(\"/put-mapping\")\n    fun putMapping(@RequestBody svcDto: UserRequestDto): UserResponseDto {\n        return UserResponseDto().apply {\n            this.result = ResultDto().apply {\n                this.resultCode = \"OK\"\n                this.resultMessage = \"성공\"\n            }\n        }.apply {\n            this.description = \"~~~~~~~~~~~~~~\"\n        }.apply {\n            this.userList.add(svcDto)\n\n            this.userList.add(UserRequestDto().apply {\n                this.name = \"Steve\"\n                this.age = 22\n            })\n\n            this.userList.add(UserRequestDto().apply {\n                this.name = \"Ah~~~~\"\n                this.age = 18\n            })\n        }\n    }\n}<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"dto---userrequestdto\"><a href=\"#dto---userrequestdto\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dto - UserRequestDto</h2>\n<pre class=\"language-Kotlin line-numbers\"><code class=\"language-Kotlin\">@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy::class)\n//@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy::class) //deprecated\ndata class UserRequestDto(\n    var name: String?=null,\n    var age: Int?=null,\n    var email: String?=null,\n    var address: String?=null,\n)<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"dto---userresponsedto\"><a href=\"#dto---userresponsedto\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dto - UserResponseDto</h2>\n<pre class=\"language-Kotlin line-numbers\"><code class=\"language-Kotlin\">@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy::class)\n//@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy::class) //deprecated\ndata class UserResponseDto(\n    var result:ResultDto?=null,\n    var description:String?=null,\n\n    @JsonProperty(\"user\")\n    var userList: MutableList<UserRequestDto> = mutableListOf(),\n)\n\n\ndata class ResultDto (\n    var resultCode: String ?= null,\n    var resultMessage: String ?= null,\n)<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"출처\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>출처</h1>\n<ul>\n<li>PUT의 개념, 예제 - <a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Methods/PUT\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Web/HTTP/Methods/PUT</a>  </li>\n<li>멱등성 - <a href=\"https://developer.mozilla.org/ko/docs/Glossary/Idempotent\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Glossary/Idempotent</a>  </li>\n<li>PropertyNamingStrategies.SnakeCaseStrategy::class - <a href=\"https://zzang9ha.tistory.com/380\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://zzang9ha.tistory.com/380</a>  </li>\n<li>인프런: 스프링부트-코틀린 - <a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-%EC%BD%94%ED%8B%80%EB%A6%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-%EC%BD%94%ED%8B%80%EB%A6%B0</a></li>\n</ul>\n","lang":"ko","category":["Kotlin","SpringBoot"],"date":"2022-09-18T10:22:00.000Z"}},{"node":{"id":"5c7526fd7389af200a777e6035a7f060","title":"SpringBoot Web MVC ResponseEntity","content":"<h1 id=\"responseentity란\"><a href=\"#responseentity%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ResponseEntity란?</h1>\n<p>Spring Framework에서 제공하는 클래스 중 HttpEntity라는 클래스가 존재한다. 이것은 HTTP 요청(Request) 또는 응답(Response)에 해당하는 HttpHeader와 HttpBody를 포함하는 클래스이다.</p>\n<h2 id=\"http-상태코드\"><a href=\"#http-%EC%83%81%ED%83%9C%EC%BD%94%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Http 상태코드</h2>\n<ul>\n<li>1xx (정보): 요청을 받았으며 프로세스를 계속한다</li>\n<li>2xx (성공): 요청을 성공적으로 받았으며 인식했고 수용하였다</li>\n<li>3xx (리다이렉션): 요청 완료를 위해 추가 작업 조치가 필요하다</li>\n<li>4xx (클라이언트 오류): 요청의 문법이 잘못되었거나 요청을 처리할 수 없다</li>\n<li>5xx (서버 오류): 서버가 명백히 유효한 요청에 대해 충족을 실패했다</li>\n</ul>\n<h1 id=\"kotlin---springboot\"><a href=\"#kotlin---springboot\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kotlin - SpringBoot</h1>\n<h2 id=\"controller-예제\"><a href=\"#controller-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Controller 예제</h2>\n<pre class=\"language-Kotlin line-numbers\"><code class=\"language-Kotlin\">@RestController\n@RequestMapping(\"/api\")\nclass ResponseApiController {\n    // 1. Get 4xx\n    // Get http://locaLhost:8080/api/repose?age=10\n    @GetMapping(\"\")\n    fun getMapping(@RequestParam age: Int?): ResponseEntity<String> {\n        return age?.let {\n            if (age < 20) {\n                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"age 값은 20보다 커야합니다.\")\n            }\n            ResponseEntity.ok(\"OK\")\n        }?: kotlin.run {\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"age 값이 누락되었습니다.\")\n        }\n    }\n\n    // 2. Post 200\n    @PostMapping(\"\")\n    fun postMapping(@RequestBody userRequestDto: UserRequestDto?): ResponseEntity<Any> {\n        return ResponseEntity.status(HttpStatus.OK).body(userRequestDto)\n    }\n\n    // 3. Put 201\n    @PutMapping\n    fun putMapping(@RequestBody userRequestDto: UserRequestDto?): ResponseEntity<Any> {\n        return ResponseEntity.status(HttpStatus.CREATED).body(userRequestDto)\n    }\n\n    // 4. delete 500\n    fun deleteMapping(@PathVariable id: Int) : ResponseEntity<Any> {\n        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null)\n    }\n}<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"출처\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>출처</h1>\n<ul>\n<li>ResponseEntity란? - <a href=\"https://devlog-wjdrbs96.tistory.com/182\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://devlog-wjdrbs96.tistory.com/182</a>  </li>\n<li>Http 상태코드 - <a href=\"https://ko.wikipedia.org/wiki/HTTP_%EC%83%81%ED%83%9C_%EC%BD%94%EB%93%9C\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.wikipedia.org/wiki/HTTP_%EC%83%81%ED%83%9C_%EC%BD%94%EB%93%9C</a>  </li>\n<li>인프런: 스프링부트-코틀린 - <a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-%EC%BD%94%ED%8B%80%EB%A6%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-%EC%BD%94%ED%8B%80%EB%A6%B0</a></li>\n</ul>\n","lang":"ko","category":["Kotlin","SpringBoot"],"date":"2022-09-18T10:22:00.000Z"}}]},"menu":{"edges":[{"node":{"category":["TypeScript"],"lang":"ko"}},{"node":{"category":["TypeScript"],"lang":"ko"}},{"node":{"category":["Raspberry Pi","Ubuntu Linux"],"lang":"ko"}},{"node":{"category":["Raspberry Pi","Ubuntu Linux"],"lang":"ko"}},{"node":{"category":["Raspberry Pi","Ubuntu Linux"],"lang":"ko"}},{"node":{"category":["Raspberry Pi","Ubuntu Linux"],"lang":"ko"}},{"node":{"category":["NodeJS","개발환경"],"lang":"ko"}},{"node":{"category":["Linux","설정"],"lang":"ko"}},{"node":{"category":["Linux","VirtualBox"],"lang":"ko"}},{"node":{"category":["Linux","Shell Script"],"lang":"ko"}},{"node":{"category":["Kotlin","SpringBoot"],"lang":"ko"}},{"node":{"category":["Kotlin","SpringBoot"],"lang":"ko"}},{"node":{"category":["Kotlin","SpringBoot"],"lang":"ko"}},{"node":{"category":["Java","Library"],"lang":"ko"}},{"node":{"category":["Git"],"lang":"ko"}},{"node":{"category":["FrontEnd","Vue3"],"lang":"ko"}},{"node":{"category":["FrontEnd","Vue3"],"lang":"ko"}},{"node":{"category":["FrontEnd","Vue3"],"lang":"ko"}},{"node":{"category":["FrontEnd","Gridsome"],"lang":"ko"}},{"node":{"category":["FrontEnd","Gridsome"],"lang":"ko"}},{"node":{"category":["FrontEnd","Gridsome"],"lang":"ko"}},{"node":{"category":["Database","Postgresql"],"lang":"ko"}},{"node":{"category":["Database","Postgresql"],"lang":"ko"}},{"node":{"category":["Blog","에세이"],"lang":"ko"}},{"node":{"category":["Blog","블로그개발일지"],"lang":"ko"}}]}},"context":{}}