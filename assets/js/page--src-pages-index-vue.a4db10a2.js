(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"9kLY":function(n,s,a){},E76n:function(n,s,a){"use strict";a("9kLY")},iyQ6:function(n,s,a){"use strict";a.r(s);a("E76n");var p=a("KHd+"),e=null,t=a("Kw5r"),o=t.a.config.optionMergeStrategies.computed,r={allMarkdownPost:{edges:[{node:{id:"febfe5f5278b4bb995c4e3e07d5af29d",title:"부팅시 VERR_INTNET_FLT_IF_NOT_FOUND 오류",content:'<h1 id="1-배경"><a href="#1-%EB%B0%B0%EA%B2%BD" aria-hidden="true"><span class="icon icon-link"></span></a>1. 배경</h1>\n<p>윈도우에서 VirtualBox를 통해서 리눅스를 설치하고 사용하고 있다. 그런데, 윈도우 업데이트 이후 리눅스 부팅시 아래의 메시지가 뜨면서 부팅이 되지 않는다.</p>\n<pre class="language-text line-numbers"><code class="language-text">가상 머신 ubuntu-20의 세션을 열 수 없습니다.\n\nFailed to open/create the internal network &#39;HostInterfaceNetworking-VirtualBox Host-Only Ethernet Adapter&#39; (VERR_INTNET_FLT_IF_NOT_FOUND).\n\nFailed to attach the network LUN (VERR_INTNET_FLT_IF_NOT_FOUND).\n\n결과 코드: E_FAIL (0x80004005)\n구성 요소: ConsoleWrap\n인터페이스: IConsole {872da645-4a9b-1727-bee2-5585105b9eed}<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id="--환경"><a href="#--%ED%99%98%EA%B2%BD" aria-hidden="true"><span class="icon icon-link"></span></a>- 환경</h3>\n<p>Host: Windows 11 22H2</p>\n<h1 id="2-원인-해결책"><a href="#2-%EC%9B%90%EC%9D%B8-%ED%95%B4%EA%B2%B0%EC%B1%85" aria-hidden="true"><span class="icon icon-link"></span></a>2. 원인, 해결책</h1>\n<p>원인은 아직 찾지 못했으나, 검색해본 결과 나와 같은 케이스가 있었다. 해당 블로그에서는 새로 네트워크를 생성해주니 된다고 포스팅 되어있다.\n그런데 시스템을 깔끔하게 싶어서 기존에 있는 네트워크를 삭제하고, 다시 생성해서 부팅했는데 되지 않았다. 그래서 블로그에 적힌대로 안되는 어댑터를 냅두고\n어댑터를 추가 생성했더니 정상 부팅된다.</p>\n<pre class="language-text line-numbers"><code class="language-text">VirtualBox &gt; 파일 &gt; 호스트 네트워크 관리자(H) &gt; 만들기(C) <span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p>IP관련해서 수정이 필요하면 속성(P)을 눌러서 정보를 변경해주면 된다. 그리고 확인을 누르면 어댑터 생성 완료.  </p>\n<p>그리고</p>\n<pre class="language-text line-numbers"><code class="language-text">왼쪽 &gt; VM선택 (ex: ubuntu-20) &gt; 설정(S) &gt; 네트워크 <span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p>메뉴들어가서 호스트 전용 어댑터 선택되어있는 탭을 찾아서 새로 만들어놓은 어댑터 선택하면 완료.<br>\n그리고 부팅하면 정상 부팅 완료.</p>\n<p><img src="/img/ko/2022/20221009001.png" alt="어댑터 생성"></p>\n<h1 id="3-결론"><a href="#3-%EA%B2%B0%EB%A1%A0" aria-hidden="true"><span class="icon icon-link"></span></a>3. 결론</h1>\n<p>위에도 작성했지만 원인은 아직 찾지 못했다. 윈도우 업데이트 할때마다 이런 경우가 자주 발생한다면 원인을 찾긴 해야겠다. 하지만, 지금은 해결되었으니 이번에는 해결하는걸로 패스.</p>\n<h1 id="9-참조"><a href="#9-%EC%B0%B8%EC%A1%B0" aria-hidden="true"><span class="icon icon-link"></span></a>9. 참조</h1>\n<p><a href="https://wnw1005.tistory.com/224" target="_blank" rel="nofollow noopener noreferrer">버추얼박스(VirtualBox) 호스트 네트워크 관련 VERR_INTNET_FLT_IF_NOT_FOUND 오류</a>  </p>\n',lang:"ko",category:["Linux","VirtualBox"],date:"2022-10-09T11:23:00.000Z"}},{node:{id:"bf89579966bacedfefa97d17ea28abf6",title:"git checkout를 switch restore로 대체하기",content:'<h1 id="1-배경"><a href="#1-%EB%B0%B0%EA%B2%BD" aria-hidden="true"><span class="icon icon-link"></span></a>1. 배경</h1>\n<p>git에 사용법이 그리 익숙치가 않아서, branch이동이나 복구등등을 찾다보니 git checkout 기능이 switch, restore로 분리되어서 새 기능이 추가 되었다고 한다. 사유는 checkout 하나의 명령어에 기능이 많기 때문이라고 한다.\n그 동안 checkout으로 사용해왔는데, 명확하기 위해서 분리했다고 하니 새로운 기능을 사용하는 것이 좋을 것 같다. </p>\n<h1 id="2-switch"><a href="#2-switch" aria-hidden="true"><span class="icon icon-link"></span></a>2. switch</h1>\n<p>branch 이동</p>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">git</span> switch master\nSwitched to branch <span class="token string">\'master\'</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<p>branch HEAD기반 생성</p>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">git</span> switch -c new-branch\nSwitched to a new branch <span class="token string">\'new-branch\'</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<p>branch 특정commit기반 생성 </p>\n<pre class="language-bash line-numbers"><code class="language-bash"><span class="token function">git</span> switch -c new-branch3 67b7c2d\nSwitched to a new branch <span class="token string">\'new-branch3\'</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<p>branch Reset<br>\n※ 브랜치 리셋을 하는 기능이 있긴한데, 이게 권고되는건지는 확인필요</p>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">git</span> switch --force-create new-branch   \nReset branch <span class="token string">\'new-branch\'</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<p><a href="https://git-scm.com/docs/git-switch" target="_blank" rel="nofollow noopener noreferrer">git-switch reference</a></p>\n<h1 id="3-restore"><a href="#3-restore" aria-hidden="true"><span class="icon icon-link"></span></a>3. restore</h1>\n<p>HEAD로 restore </p>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">git</span> restore test.md<span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p>stage에 올라간 파일 제외하기</p>\n<pre class="language-bash line-numbers"><code class="language-bash"><span class="token function">git</span> restore --staged test.md<span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p><a href="https://git-scm.com/docs/git-restore" target="_blank" rel="nofollow noopener noreferrer">git-restore reference</a></p>\n<h1 id="4-결론"><a href="#4-%EA%B2%B0%EB%A1%A0" aria-hidden="true"><span class="icon icon-link"></span></a>4. 결론</h1>\n<p>git checkout보다는 switch, restore로 구분해서 사용하자. 그리고 해당 명령어에 전체 기능을 정리한게 아니기 때문에 다른 기능이 더 필요하다면 레퍼런스를 참조해서 진행하자. 기능을 하나씩 습득할때마다 그때마다 정리를 하자.</p>\n<h1 id="참조"><a href="#%EC%B0%B8%EC%A1%B0" aria-hidden="true"><span class="icon icon-link"></span></a>참조</h1>\n<ul>\n<li><a href="https://blog.outsider.ne.kr/1505" target="_blank" rel="nofollow noopener noreferrer">새 버전에 맞게 git checkout 대신 switch/restore 사용하기 - Outsider\'s Dev Story</a></li>\n<li><a href="https://git-scm.com/docs" target="_blank" rel="nofollow noopener noreferrer">Git reference</a></li>\n</ul>\n',lang:"ko",category:["Git"],date:"2022-10-01T08:09:00.000Z"}},{node:{id:"44b04985ddf818570083ef9f1843d2ba",title:"SpringBoot Web MVC DELETE",content:'<h1 id="delete의개념"><a href="#delete%EC%9D%98%EA%B0%9C%EB%85%90" aria-hidden="true"><span class="icon icon-link"></span></a>DELETE의개념</h1>\n<p>HTTP DELETE 메서드는 지정한 리소스를 삭제합니다.</p>\n<h2 id="예제"><a href="#%EC%98%88%EC%A0%9C" aria-hidden="true"><span class="icon icon-link"></span></a>예제</h2>\n<h3 id="요청"><a href="#%EC%9A%94%EC%B2%AD" aria-hidden="true"><span class="icon icon-link"></span></a>요청</h3>\n<pre class="language-text line-numbers"><code class="language-text">DELETE /file.html HTTP/1.1<span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<h3 id="응답"><a href="#%EC%9D%91%EB%8B%B5" aria-hidden="true"><span class="icon icon-link"></span></a>응답</h3>\n<ul>\n<li>아마도 명령을 성공적으로 수행할 것 같으나 아직은 실행하지 않은 경우 202 (Accepted) 상태 코드.</li>\n<li>명령을 수행했고 더 이상 제공할 정보가 없는 경우 204 (No Content) 상태 코드.</li>\n<li>명령을 수행했고 응답 메시지가 이후의 상태를 설명하는 경우 200 (OK) 상태 코드.</li>\n</ul>\n<pre class="language-text line-numbers"><code class="language-text">HTTP/1.1 200 OK\nDate: Wed, 21 Oct 2015 07:28:00 GMT\n\n&lt;html&gt;\n  &lt;body&gt;\n    &lt;h1&gt;File deleted.&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id="kotlin---springboot"><a href="#kotlin---springboot" aria-hidden="true"><span class="icon icon-link"></span></a>Kotlin - SpringBoot</h1>\n<h2 id="controller-예제"><a href="#controller-%EC%98%88%EC%A0%9C" aria-hidden="true"><span class="icon icon-link"></span></a>Controller 예제</h2>\n<pre class="language-Kotlin line-numbers"><code class="language-Kotlin">@RestController\n@RequestMapping("/api")\nclass DeleteApiController {\n\n    // URL : /api/delete-mapping?name=test&age=22\n    @DeleteMapping(path = ["/delete-mapping"])\n    fun deleteMapping(\n        @RequestParam(value = "name") _name : String,\n        @RequestParam(value = "age") _age : Int,\n    ): String {\n        println(_name)\n        println(_age)\n        return _name + " " + _age\n    }\n\n    // URL : /api/delete-mapping/name/{name}/age/{age}\n    @DeleteMapping(path = ["/delete-mapping/name/{name}/age/{age}"])\n    fun deleteMappingPath(\n        @PathVariable(value = "name") _name : String,\n        @PathVariable(value = "age") _age : Int,\n    ): String {\n        println(_name)\n        println(_age)\n        return _name + " " + _age\n    }\n}<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id="출처"><a href="#%EC%B6%9C%EC%B2%98" aria-hidden="true"><span class="icon icon-link"></span></a>출처</h1>\n<ul>\n<li>DELETE의 개념, 예제 - <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Methods/DELETE" target="_blank" rel="nofollow noopener noreferrer">https://developer.mozilla.org/ko/docs/Web/HTTP/Methods/DELETE</a>  </li>\n<li>인프런: 스프링부트-코틀린 - <a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-%EC%BD%94%ED%8B%80%EB%A6%B0" target="_blank" rel="nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-%EC%BD%94%ED%8B%80%EB%A6%B0</a></li>\n</ul>\n',lang:"ko",category:["Kotlin","SpringBoot"],date:"2022-09-19T10:25:00.000Z"}},{node:{id:"1cebe7f1ec36075dce004aa0ac9acaac",title:"SpringBoot Web MVC PUT",content:'<h1 id="put의개념"><a href="#put%EC%9D%98%EA%B0%9C%EB%85%90" aria-hidden="true"><span class="icon icon-link"></span></a>Put의개념</h1>\n<p>HTTP PUT 메서드는 요청 페이로드를 사용해 새로운 리소스를 생성하거나, 대상 리소스를 나타내는 데이터를 대체합니다.\nPUT과 POST의 차이는 멱등성으로, PUT은 멱등성을 가집니다. PUT은 한 번을 보내도, 여러 번을 연속으로 보내도 같은 효과를 보입니다. 즉, 부수 효과가 없습니다.  </p>\n<p>※ 멱등성<br>\n동일한 요청을 한 번 보내는 것과 여러 번 연속으로 보내는 것이 같은 효과를 지니고, 서버의 상태도 동일하게 남을 때, 해당 HTTP 메서드가 멱등성을 가졌다고 말합니다.\n다른 말로는, 멱등성 메서드에는 통계 기록 등을 제외하면 어떠한 부수 효과(side effect)도 존재해서는 안됩니다.\n올바르게 구현한 경우 GET, HEAD, PUT, DELETE 메서드는 멱등성을 가지며, POST 메서드는 그렇지 않습니다. 모든 안전한 메서드는 멱등성도 가집니다.</p>\n<h2 id="예제"><a href="#%EC%98%88%EC%A0%9C" aria-hidden="true"><span class="icon icon-link"></span></a>예제</h2>\n<h3 id="요청"><a href="#%EC%9A%94%EC%B2%AD" aria-hidden="true"><span class="icon icon-link"></span></a>요청</h3>\n<pre class="language-text line-numbers"><code class="language-text">PUT /new.html HTTP/1.1\nHost: example.com\nContent-type: text/html\nContent-length: 16\n\n&lt;p&gt;New File&lt;/p&gt;<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id="응답"><a href="#%EC%9D%91%EB%8B%B5" aria-hidden="true"><span class="icon icon-link"></span></a>응답</h3>\n<p>데이터가 생성된 경우 </p>\n<pre class="language-text line-numbers"><code class="language-text">HTTP/1.1 201 Created\nContent-Location: /new.html<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<p>데이터가 없는경우는 200(OK) 또는 204(No Content) 응답</p>\n<pre class="language-text line-numbers"><code class="language-text">HTTP/1.1 204 No Content\nContent-Location: /existing.html<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<h1 id="kotlin---springboot"><a href="#kotlin---springboot" aria-hidden="true"><span class="icon icon-link"></span></a>Kotlin - SpringBoot</h1>\n<h2 id="controller-예제"><a href="#controller-%EC%98%88%EC%A0%9C" aria-hidden="true"><span class="icon icon-link"></span></a>Controller 예제</h2>\n<pre class="language-Kotlin line-numbers"><code class="language-Kotlin">@RestController\n@RequestMapping("/api")\nclass PutApiController {\n\n    //비추천 - @PutMapping 사용\n    @RequestMapping(method = [RequestMethod.PUT], path = ["/request-mapping"])\n    fun requestMapping(): String{\n        return "request-mapping - put method"\n    }\n\n\n    //추천\n    @PutMapping("/put-mapping")\n    fun putMapping(@RequestBody svcDto: UserRequestDto): UserResponseDto {\n        return UserResponseDto().apply {\n            this.result = ResultDto().apply {\n                this.resultCode = "OK"\n                this.resultMessage = "성공"\n            }\n        }.apply {\n            this.description = "~~~~~~~~~~~~~~"\n        }.apply {\n            this.userList.add(svcDto)\n\n            this.userList.add(UserRequestDto().apply {\n                this.name = "Steve"\n                this.age = 22\n            })\n\n            this.userList.add(UserRequestDto().apply {\n                this.name = "Ah~~~~"\n                this.age = 18\n            })\n        }\n    }\n}<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id="dto---userrequestdto"><a href="#dto---userrequestdto" aria-hidden="true"><span class="icon icon-link"></span></a>Dto - UserRequestDto</h2>\n<pre class="language-Kotlin line-numbers"><code class="language-Kotlin">@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy::class)\n//@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy::class) //deprecated\ndata class UserRequestDto(\n    var name: String?=null,\n    var age: Int?=null,\n    var email: String?=null,\n    var address: String?=null,\n)<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id="dto---userresponsedto"><a href="#dto---userresponsedto" aria-hidden="true"><span class="icon icon-link"></span></a>Dto - UserResponseDto</h2>\n<pre class="language-Kotlin line-numbers"><code class="language-Kotlin">@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy::class)\n//@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy::class) //deprecated\ndata class UserResponseDto(\n    var result:ResultDto?=null,\n    var description:String?=null,\n\n    @JsonProperty("user")\n    var userList: MutableList<UserRequestDto> = mutableListOf(),\n)\n\n\ndata class ResultDto (\n    var resultCode: String ?= null,\n    var resultMessage: String ?= null,\n)<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id="출처"><a href="#%EC%B6%9C%EC%B2%98" aria-hidden="true"><span class="icon icon-link"></span></a>출처</h1>\n<ul>\n<li>PUT의 개념, 예제 - <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Methods/PUT" target="_blank" rel="nofollow noopener noreferrer">https://developer.mozilla.org/ko/docs/Web/HTTP/Methods/PUT</a>  </li>\n<li>멱등성 - <a href="https://developer.mozilla.org/ko/docs/Glossary/Idempotent" target="_blank" rel="nofollow noopener noreferrer">https://developer.mozilla.org/ko/docs/Glossary/Idempotent</a>  </li>\n<li>PropertyNamingStrategies.SnakeCaseStrategy::class - <a href="https://zzang9ha.tistory.com/380" target="_blank" rel="nofollow noopener noreferrer">https://zzang9ha.tistory.com/380</a>  </li>\n<li>인프런: 스프링부트-코틀린 - <a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-%EC%BD%94%ED%8B%80%EB%A6%B0" target="_blank" rel="nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-%EC%BD%94%ED%8B%80%EB%A6%B0</a></li>\n</ul>\n',lang:"ko",category:["Kotlin","SpringBoot"],date:"2022-09-18T10:22:00.000Z"}},{node:{id:"5c7526fd7389af200a777e6035a7f060",title:"SpringBoot Web MVC ResponseEntity",content:'<h1 id="responseentity란"><a href="#responseentity%EB%9E%80" aria-hidden="true"><span class="icon icon-link"></span></a>ResponseEntity란?</h1>\n<p>Spring Framework에서 제공하는 클래스 중 HttpEntity라는 클래스가 존재한다. 이것은 HTTP 요청(Request) 또는 응답(Response)에 해당하는 HttpHeader와 HttpBody를 포함하는 클래스이다.</p>\n<h2 id="http-상태코드"><a href="#http-%EC%83%81%ED%83%9C%EC%BD%94%EB%93%9C" aria-hidden="true"><span class="icon icon-link"></span></a>Http 상태코드</h2>\n<ul>\n<li>1xx (정보): 요청을 받았으며 프로세스를 계속한다</li>\n<li>2xx (성공): 요청을 성공적으로 받았으며 인식했고 수용하였다</li>\n<li>3xx (리다이렉션): 요청 완료를 위해 추가 작업 조치가 필요하다</li>\n<li>4xx (클라이언트 오류): 요청의 문법이 잘못되었거나 요청을 처리할 수 없다</li>\n<li>5xx (서버 오류): 서버가 명백히 유효한 요청에 대해 충족을 실패했다</li>\n</ul>\n<h1 id="kotlin---springboot"><a href="#kotlin---springboot" aria-hidden="true"><span class="icon icon-link"></span></a>Kotlin - SpringBoot</h1>\n<h2 id="controller-예제"><a href="#controller-%EC%98%88%EC%A0%9C" aria-hidden="true"><span class="icon icon-link"></span></a>Controller 예제</h2>\n<pre class="language-Kotlin line-numbers"><code class="language-Kotlin">@RestController\n@RequestMapping("/api")\nclass ResponseApiController {\n    // 1. Get 4xx\n    // Get http://locaLhost:8080/api/repose?age=10\n    @GetMapping("")\n    fun getMapping(@RequestParam age: Int?): ResponseEntity<String> {\n        return age?.let {\n            if (age < 20) {\n                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("age 값은 20보다 커야합니다.")\n            }\n            ResponseEntity.ok("OK")\n        }?: kotlin.run {\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("age 값이 누락되었습니다.")\n        }\n    }\n\n    // 2. Post 200\n    @PostMapping("")\n    fun postMapping(@RequestBody userRequestDto: UserRequestDto?): ResponseEntity<Any> {\n        return ResponseEntity.status(HttpStatus.OK).body(userRequestDto)\n    }\n\n    // 3. Put 201\n    @PutMapping\n    fun putMapping(@RequestBody userRequestDto: UserRequestDto?): ResponseEntity<Any> {\n        return ResponseEntity.status(HttpStatus.CREATED).body(userRequestDto)\n    }\n\n    // 4. delete 500\n    fun deleteMapping(@PathVariable id: Int) : ResponseEntity<Any> {\n        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null)\n    }\n}<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id="출처"><a href="#%EC%B6%9C%EC%B2%98" aria-hidden="true"><span class="icon icon-link"></span></a>출처</h1>\n<ul>\n<li>ResponseEntity란? - <a href="https://devlog-wjdrbs96.tistory.com/182" target="_blank" rel="nofollow noopener noreferrer">https://devlog-wjdrbs96.tistory.com/182</a>  </li>\n<li>Http 상태코드 - <a href="https://ko.wikipedia.org/wiki/HTTP_%EC%83%81%ED%83%9C_%EC%BD%94%EB%93%9C" target="_blank" rel="nofollow noopener noreferrer">https://ko.wikipedia.org/wiki/HTTP_%EC%83%81%ED%83%9C_%EC%BD%94%EB%93%9C</a>  </li>\n<li>인프런: 스프링부트-코틀린 - <a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-%EC%BD%94%ED%8B%80%EB%A6%B0" target="_blank" rel="nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-%EC%BD%94%ED%8B%80%EB%A6%B0</a></li>\n</ul>\n',lang:"ko",category:["Kotlin","SpringBoot"],date:"2022-09-18T10:22:00.000Z"}},{node:{id:"058d9194916c75fe6c1f9d3b45361217",title:"호스트네임변경",content:'<h1 id="1-배경"><a href="#1-%EB%B0%B0%EA%B2%BD" aria-hidden="true"><span class="icon icon-link"></span></a>1. 배경</h1>\n<p>우분투 설치후 기본적으로 호스트네임은 ubuntu로 되어있다. 이걸 내가 사용하는 호스트네임으로 변경하고 싶다.<br>\nubuntu에서 zerost-rpi로 변경할 예정이다.  </p>\n<h3 id="--환경"><a href="#--%ED%99%98%EA%B2%BD" aria-hidden="true"><span class="icon icon-link"></span></a>- 환경</h3>\n<p>Ubuntu 22.04 LTS (GNU/Linux 5.15.0-1011-raspi aarch64)</p>\n<h1 id="2-현재-호스트네임-확인"><a href="#2-%ED%98%84%EC%9E%AC-%ED%98%B8%EC%8A%A4%ED%8A%B8%EB%84%A4%EC%9E%84-%ED%99%95%EC%9D%B8" aria-hidden="true"><span class="icon icon-link"></span></a>2. 현재 호스트네임 확인</h1>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">hostname</span>\nubuntu<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<h1 id="3-호스트네임-변경"><a href="#3-%ED%98%B8%EC%8A%A4%ED%8A%B8%EB%84%A4%EC%9E%84-%EB%B3%80%EA%B2%BD" aria-hidden="true"><span class="icon icon-link"></span></a>3. 호스트네임 변경</h1>\n<p>내가 변경하고자 하는 zerost-rpi로 변경한다. 아래와 같이 명령어를 실행한다.</p>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">sudo</span> hostnamectl set-hostname zerost-rpi<span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<h1 id="4-변경된-호스트네임-확인"><a href="#4-%EB%B3%80%EA%B2%BD%EB%90%9C-%ED%98%B8%EC%8A%A4%ED%8A%B8%EB%84%A4%EC%9E%84-%ED%99%95%EC%9D%B8" aria-hidden="true"><span class="icon icon-link"></span></a>4. 변경된 호스트네임 확인</h1>\n<p>내가 변경한 이름으로 변경완료 확인.</p>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">hostname</span>\nzerost-rpi<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<h1 id="5-결론"><a href="#5-%EA%B2%B0%EB%A1%A0" aria-hidden="true"><span class="icon icon-link"></span></a>5. 결론</h1>\n<p>한줄로 간단하게 호스트네임이 변경된다. </p>\n<h1 id="9-참조"><a href="#9-%EC%B0%B8%EC%A1%B0" aria-hidden="true"><span class="icon icon-link"></span></a>9. 참조</h1>\n<p><a href="https://pinggoopark.tistory.com/86" target="_blank" rel="nofollow noopener noreferrer">[linux] 우분투 hostname 변경하기 - 이제 막 시작 Blog</a></p>\n',lang:"ko",category:["Linux","설정"],date:"2022-06-29T21:36:00.000Z"}},{node:{id:"ed92af7545f3edd2f877f2fc086d50a0",title:"Apache Commons IO 라이브러리 FilenameUtils",content:'<h1 id="1-배경"><a href="#1-%EB%B0%B0%EA%B2%BD" aria-hidden="true"><span class="icon icon-link"></span></a>1. 배경</h1>\n<p>프로젝트를 수행하다보면 파일관련된 작업이 필요하다. 예를 들면 파일업로드, 첨부파일 다운로드등 처리를 하게 되면 파일명, 확장자, 파일사이즈, 경로등\n처리가 필요하게 된다. 그 때마다 Java에서 지원하는 API를 찾아서, RAW데이터를 받아서 데이터 가공을 해야한다. 가공하는 과정에서 예기치 못하는 오류가 발생할 수 도 있다.\n그래서 데이터 가공하는 과정도 별도로 테스트가 필요한 상황이 된다. 그런데, 이미 이런 기능들을 나만 사용하는 것도 아닐테고, 이미 한참전부터 많은 사람들이 사용하고 있었을 것 같고, 당연히 라이브러리도 있을 것이라고 판단했다. 검색을 했더니 <a href="https://commons.apache.org/proper/commons-io/" target="_blank" rel="nofollow noopener noreferrer">Apache Commons IO</a> 라는 라이브러리를 찾았다.<br>\n이번에는 파일의 확장자명을 가져오는 부분이 필요해서 해당 부분을 찾았다.</p>\n<h1 id="2-fileutils-class-확인"><a href="#2-fileutils-class-%ED%99%95%EC%9D%B8" aria-hidden="true"><span class="icon icon-link"></span></a>2. FileUtils Class 확인</h1>\n<p><a href="https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FilenameUtils.html" target="_blank" rel="nofollow noopener noreferrer">File Utils class API</a>를 확인하니 확장자를 가져오는 메소드가 존재한다.</p>\n<blockquote>\n<p>static String <code class="language-text">getExtension(String fileName)</code></p>\n<blockquote>\n<p>Gets the extension of a fileName.</p>\n</blockquote>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>파일명</th>\n<th>리턴확장자명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>foo.txt</td>\n<td>"txt"</td>\n</tr>\n<tr>\n<td>a/b/c.jpg</td>\n<td>"jpg"</td>\n</tr>\n<tr>\n<td>a/b.txt/c</td>\n<td>""</td>\n</tr>\n<tr>\n<td>a/b/c</td>\n<td>""</td>\n</tr>\n</tbody>\n</table>\n<p>예) </p>\n<pre class="language-java line-numbers"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">"test.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\njpg<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span></span></code></pre>\n<h1 id="3-결론"><a href="#3-%EA%B2%B0%EB%A1%A0" aria-hidden="true"><span class="icon icon-link"></span></a>3. 결론</h1>\n<p>이미 개발해놓은 라이브러리를 사용하는 것이 테스트코드를 줄일수 있는 방법중에 하나 일 것 같아서 적용해보았다. 내가 필요한 부분을 그리 어렵게 개발할 수도 있긴 하지만,\n그 동안 많은 사람들이 사용하면서 많은 부분을 보완해가면서 만든 소스를 사용하는 것. 내가 예상하지 못했던 부분까지 생각해서 개발 되어 있을 수도 있으니 사용하는게 좋을 것 같다.\n이런 기능을 개발할 시간에 해당 라이브러리를 적용하고 나는 좀 더 비지니스 개발에 집중하자.</p>\n<h1 id="9-참조"><a href="#9-%EC%B0%B8%EC%A1%B0" aria-hidden="true"><span class="icon icon-link"></span></a>9. 참조</h1>\n<p><a href="https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FilenameUtils.html#getExtension-java.lang.String" target="_blank" rel="nofollow noopener noreferrer">FilenameUtils - Apache Commons IO</a></p>\n',lang:"ko",category:["Java","Library"],date:"2022-06-28T22:29:00.000Z"}},{node:{id:"505811fab357630089775ae32ea5d7eb",title:"Vue3 script setup",content:'<h1 id="1-script-setup란"><a href="#1-script-setup%EB%9E%80" aria-hidden="true"><span class="icon icon-link"></span></a>1. &#x3C;script setup>란?</h1>\n<p>&#x3C;script setup>은 SFC(Single File Components)내에서 Composition API를 사용하기 위해서 권장되는 구문이다. &#x3C;script> 구문에 비해 몇가지 나은점을 제공한다.</p>\n<p>공식사이트에는 아래와 같은 내용이 있다.</p>\n<ul>\n<li>More succinct code with less boilerplate</li>\n<li>Ability to declare props and emitted events using pure TypeScript</li>\n<li>Better runtime performance (the template is compiled into a render function in the same scope, without an intermediate proxy)</li>\n<li>Better IDE type-inference performance (less work for the language -server to extract types from code)</li>\n</ul>\n<p>개인적으로 느낀바로는 변수나 객체등을 또 다시 return 구문에 입력하지 않아도 됨으로서, return 구문이 비대해지거나 return 기입시 오타등으로 인해서 예기치 않는 오류만 발생하지 않는 것 만으로도 매우 훌륭하다고 느낀다. 코드도 훨씬 깔끔해진다.</p>\n<h1 id="2-composition-api와-script-setup-비교"><a href="#2-composition-api%EC%99%80-script-setup-%EB%B9%84%EA%B5%90" aria-hidden="true"><span class="icon icon-link"></span></a>2. Composition API와 &#x3C;script setup> 비교</h1>\n<h2 id="composition-api"><a href="#composition-api" aria-hidden="true"><span class="icon icon-link"></span></a>Composition API</h2>\n<pre class="language-javascript line-numbers"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>\n  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"increment"</span><span class="token operator">></span>\n    <span class="token punctuation">{</span><span class="token punctuation">{</span> state<span class="token punctuation">.</span><span class="token property-access">count</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>\n\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> reactive <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">\'vue\'</span>\n\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      state<span class="token punctuation">.</span><span class="token property-access">count</span><span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// don\'t forget to expose the function as well.</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n      state<span class="token punctuation">,</span>\n      increment\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id="script-setup"><a href="#script-setup" aria-hidden="true"><span class="icon icon-link"></span></a>&#x3C;script setup></h2>\n<pre class="language-javascript line-numbers"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>\n<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> reactive <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">\'vue\'</span>\n\n<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  state<span class="token punctuation">.</span><span class="token property-access">count</span><span class="token operator">++</span>\n<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n\n<span class="token operator">&lt;</span>template<span class="token operator">></span>\n  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"increment"</span><span class="token operator">></span>\n    <span class="token punctuation">{</span><span class="token punctuation">{</span> state<span class="token punctuation">.</span><span class="token property-access">count</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>단순히 count만 증가시키는 모듈이지만 코드 라인수도 줄어들고, 간결하다. &#x3C;script setup>에서 선언한 변수나 함수를 return할 필요 없이 template에서 바로 사용할 수 있다. 변수가 한개 인데도 코드가 많이 줄어든다. 변수 갯수만큼 라인수가 늘어나는거라 복잡도가 높은 변수가 많은 프로그램일수록 소스가 간결해지는 효과는 좋다.</p>\n<h1 id="3-using-components"><a href="#3-using-components" aria-hidden="true"><span class="icon icon-link"></span></a>3. Using Components</h1>\n<p>컴포넌트 사용법. 컴포넌트 사용법도 정말 간단하다 단순하게 import만 해주게 되면 template에서 사용 할 수 있다. 기존 Composition API보다 간결하다.</p>\n<pre class="language-javascript line-numbers"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>\n<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">MyComponent</span></span> <span class="token keyword module">from</span> <span class="token string">\'./MyComponent.vue\'</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n\n<span class="token operator">&lt;</span>template<span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token maybe-class-name">MyComponent</span> <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id="dynamic-components"><a href="#dynamic-components" aria-hidden="true"><span class="icon icon-link"></span></a>Dynamic Components</h2>\n<p>동적으로 조건에따라서 컴포넌트 사용</p>\n<pre class="language-javascript line-numbers"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>\n<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Foo</span></span> <span class="token keyword module">from</span> <span class="token string">\'./Foo.vue\'</span>\n<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Bar</span></span> <span class="token keyword module">from</span> <span class="token string">\'./Bar.vue\'</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n\n<span class="token operator">&lt;</span>template<span class="token operator">></span>\n  <span class="token operator">&lt;</span>component <span class="token operator">:</span>is<span class="token operator">=</span><span class="token string">"Foo"</span> <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>component <span class="token operator">:</span>is<span class="token operator">=</span><span class="token string">"someCondition ? Foo : Bar"</span> <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id="recursive-components"><a href="#recursive-components" aria-hidden="true"><span class="icon icon-link"></span></a>Recursive Components</h2>\n<p>컴포넌트 이름이 동일하거나 이름을 변경이 필요하다면 아래와 같이 사용할 수 있다.</p>\n<pre class="language-javascript line-numbers"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">FooBar</span> <span class="token keyword module">as</span> <span class="token maybe-class-name">FooBarChild</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">\'./components\'</span><span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<h1 id="4-top-level-await"><a href="#4-top-level-await" aria-hidden="true"><span class="icon icon-link"></span></a>4. Top-level await</h1>\n<p>await 문법도 사용가능하다. 다만, Suspense와 함께 사용되어야 한다.</p>\n<pre class="language-javascript line-numbers"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>\n<span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/api/post/1</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> r<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span></span></code></pre>\n<h1 id="5-typescript-기능"><a href="#5-typescript-%EA%B8%B0%EB%8A%A5" aria-hidden="true"><span class="icon icon-link"></span></a>5. TypeScript 기능</h1>\n<p>타입 스크립트도 지원한다. </p>\n<h2 id="type-only-propsemit-declarations"><a href="#type-only-propsemit-declarations" aria-hidden="true"><span class="icon icon-link"></span></a>Type-only props/emit declarations</h2>\n<pre class="language-javascript line-numbers"><code class="language-javascript"><span class="token keyword">const</span> props <span class="token operator">=</span> defineProps<span class="token operator">&lt;</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">foo</span><span class="token operator">:</span> string\n  bar<span class="token operator">?</span><span class="token operator">:</span> number\n<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> emit <span class="token operator">=</span> defineEmits<span class="token operator">&lt;</span><span class="token punctuation">{</span>\n  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">\'change\'</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">\'update\'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id="default-props-values-when-using-type-declaration"><a href="#default-props-values-when-using-type-declaration" aria-hidden="true"><span class="icon icon-link"></span></a>Default props values when using type declaration</h2>\n<pre class="language-javascript line-numbers"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>\n  msg<span class="token operator">?</span><span class="token operator">:</span> string\n  labels<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">withDefaults</span><span class="token punctuation">(</span>defineProps<span class="token operator">&lt;</span><span class="token maybe-class-name">Props</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'hello\'</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">labels</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">[</span><span class="token string">\'one\'</span><span class="token punctuation">,</span> <span class="token string">\'two\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id="6-마치며"><a href="#6-%EB%A7%88%EC%B9%98%EB%A9%B0" aria-hidden="true"><span class="icon icon-link"></span></a>6. 마치며</h1>\n<p>Vue.js 3를 사용하고 있다면 무조건 적용해야 하는 것 같다. 토이프로젝트에  모듈들이 Composition API로 적용되어 있었다. &#x3C;script setup> 부분으로 하나씩 고쳐가고 있는데, 별도로 시간을 들여서 수정할만 하다. 소스가 간결해지는 부분이 참으로 만족스럽다. </p>\n<h1 id="9-참조"><a href="#9-%EC%B0%B8%EC%A1%B0" aria-hidden="true"><span class="icon icon-link"></span></a>9. 참조</h1>\n<ul>\n<li><a href="https://vuejs.org/api/sfc-script-setup.html" target="_blank" rel="nofollow noopener noreferrer">&#x3C;script setup> - Vue.js 공식사이트</a>  </li>\n<li><a href="https://vuejs.org/guide/introduction.html#api-styles" target="_blank" rel="nofollow noopener noreferrer">API styles - Vue.js 공식사이트</a></li>\n</ul>\n',lang:"ko",category:["FrontEnd","Vue3"],date:"2022-06-18T09:09:00.000Z"}},{node:{id:"154b308fdf4ebfcd2e12ec447e325feb",title:"TypeScript 기본타입",content:'<h1 id="1-primitives-type윈시-타입"><a href="#1-primitives-type%EC%9C%88%EC%8B%9C-%ED%83%80%EC%9E%85" aria-hidden="true"><span class="icon icon-link"></span></a>1. Primitives Type(윈시 타입)</h1>\n<ul>\n<li>\n<p>string<br>\n기본적인 문자열. "Hello, world"와 같은 문자열</p>\n<pre class="language-typescript line-numbers"><code class="language-typescript"><span class="token keyword">const</span> msg<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"message"</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> myName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"Alice"</span><span class="token punctuation">;</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>number\n자바스크립트에는 int, float형이 있는데 두개를 구분하지 않고 심플하게 number로 사용</p>\n<pre class="language-typescript line-numbers"><code class="language-typescript"><span class="token keyword">const</span> size<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> size2<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>boolean<br>\ntrue와 false 두가지 값이 있음</p>\n<pre class="language-typescript line-numbers"><code class="language-typescript"><span class="token keyword">const</span> isBig<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> isSmall<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<p>변수 선언시(const, let) 타입을 표기를 안하게되면 컴파일러가 알아서 추론을 해서 선언하게 된다. 하지만 명시적으로 표기하는 것이 유지보수시에도 도움이 되고, 선언하지 않을꺼라면 굳이 타입스크립트를 사용하지 않고 Javascript를 사용해도 될 것 같다.</p>\n<pre class="language-typescript line-numbers"><code class="language-typescript"><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">\'this is message\'</span><span class="token punctuation">;</span> <span class="token comment">//string 타입으로 추론 해줌(개인적으로 비추천함)</span>\n<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token comment">//number 타입으로 추론</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<h1 id="2-arrays배열"><a href="#2-arrays%EB%B0%B0%EC%97%B4" aria-hidden="true"><span class="icon icon-link"></span></a>2. Arrays(배열)</h1>\n<p>number형 배열 타입은 number[], string타입은 string[] 으로 선언하면 된다. Array\\<number>나 Array\\<string> 으로 작성해도 된다.</p>\n<pre class="language-typescript line-numbers"><code class="language-typescript"><span class="token keyword">const</span> values<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> values2<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<h1 id="3-any"><a href="#3-any" aria-hidden="true"><span class="icon icon-link"></span></a>3. Any</h1>\n<p>Any타입은 어떠한 값도 다 포함될 수 있는 값이다. Primitives Type이나 Array, 심지어 function까지 모두 다 들어갈수 있는 값이다. 이 타입은 굳이 사용하지 않은 것이 맞는 것 같다. 이걸 사용한다면 굳이 타입스크립트를 사용할 필요가 없는 것이다.</p>\n<pre class="language-typescript line-numbers"><code class="language-typescript"><span class="token keyword">let</span> value<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nvalue <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span> <span class="token comment">//오류 미발생</span>\n<span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//오류 미발생</span>\n<span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//오류 미발생</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id="4-function-함수"><a href="#4-function-%ED%95%A8%EC%88%98" aria-hidden="true"><span class="icon icon-link"></span></a>4. function (함수)</h1>\n<p>paramter와 return 타입에 설정가능하다.</p>\n<pre class="language-typescript line-numbers"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">length</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> name<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4 출력</span>\n\n<span class="token function">length</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Paramter타입오류 발생</span>\n<span class="token keyword">const</span> n<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token string">\'1234\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Return타입 오류 발생</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id="5-enums"><a href="#5-enums" aria-hidden="true"><span class="icon icon-link"></span></a>5. Enums</h1>\n<h2 id="숫자-열거형numeric-enums"><a href="#%EC%88%AB%EC%9E%90-%EC%97%B4%EA%B1%B0%ED%98%95numeric-enums" aria-hidden="true"><span class="icon icon-link"></span></a>숫자 열거형(Numeric enums)</h2>\n<pre class="language-typescript line-numbers"><code class="language-typescript"><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>\n  Up <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  Down<span class="token punctuation">,</span>\n  Left<span class="token punctuation">,</span>\n  Right\n<span class="token punctuation">}</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  Up을 1로 선언했음. 그 이후에 선언되는 값은 1씩 증가한값이다. 그로 인해서 Down = 2, Left = 3, Right = 4가 된다.</p>\n<pre class="language-typescript line-numbers"><code class="language-typescript"><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>\n  Up<span class="token punctuation">,</span>\n  Down<span class="token punctuation">,</span>\n  Left<span class="token punctuation">,</span>\n  Right\n<span class="token punctuation">}</span> <span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  아무런 값을 셋팅하지 않은 경우는 최상위부터 0으로 시작한다. Up = 0, Down = 1, Left = 2, Right = 3이 된다.</p>\n<pre class="language-typescript line-numbers"><code class="language-typescript"><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>\n  Up<span class="token punctuation">,</span>  <span class="token comment">//0</span>\n  Down <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">//6</span>\n  Left<span class="token punctuation">,</span> <span class="token comment">//7</span>\n  Right <span class="token comment">//8</span>\n<span class="token punctuation">}</span> <span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  상위값부터 0으로 셋팅되고, Down = 6으로 셋팅을 할 경우, 그 다음부터 1씩 증가한다. Left = 7, Right = 8이 된다.</p>\n<h2 id="문자-열거형string-enums"><a href="#%EB%AC%B8%EC%9E%90-%EC%97%B4%EA%B1%B0%ED%98%95string-enums" aria-hidden="true"><span class="icon icon-link"></span></a>문자 열거형(String enums)</h2>\n<pre class="language-typescript line-numbers"><code class="language-typescript"><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>\n  Up <span class="token operator">=</span> <span class="token string">"UP"</span><span class="token punctuation">,</span>\n  Down <span class="token operator">=</span> <span class="token string">"DOWN"</span><span class="token punctuation">,</span>\n  Left <span class="token operator">=</span> <span class="token string">"LEFT"</span><span class="token punctuation">,</span>\n  Right <span class="token operator">=</span> <span class="token string">"RIGHT"</span>\n<span class="token punctuation">}</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id="이종-열거형heterogeneous-enums"><a href="#%EC%9D%B4%EC%A2%85-%EC%97%B4%EA%B1%B0%ED%98%95heterogeneous-enums" aria-hidden="true"><span class="icon icon-link"></span></a>이종 열거형(Heterogeneous enums)</h2>\n<pre class="language-typescript line-numbers"><code class="language-typescript"><span class="token keyword">enum</span> BooleanLikeHeterogeneousEnum <span class="token punctuation">{</span>\n  No <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  Yes <span class="token operator">=</span> <span class="token string">"YES"</span>\n<span class="token punctuation">}</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  값을 숫자형과 문자형을 혼합해서 사용. 굳이 이렇게 사용할 필요는 없고, 권장하지 않는다고 함.</p>\n<h1 id="6-마치며"><a href="#6-%EB%A7%88%EC%B9%98%EB%A9%B0" aria-hidden="true"><span class="icon icon-link"></span></a>6. 마치며</h1>\n<p>TypeScript의 타입은 인터페이스, 함수타입, 클래스등 더 많은 타입이 있지만 기본타입에서는 여기까지만 정리하였다. </p>\n<h1 id="9-참조"><a href="#9-%EC%B0%B8%EC%A1%B0" aria-hidden="true"><span class="icon icon-link"></span></a>9. 참조</h1>\n<ul>\n<li><a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html" target="_blank" rel="nofollow noopener noreferrer">Everyday Types - TypeScript 공식홈페이지</a></li>\n<li><a href="https://www.inflearn.com/course/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0" target="_blank" rel="nofollow noopener noreferrer">타입스크립트 시작하기 - 인프런</a></li>\n</ul>\n',lang:"ko",category:["TypeScript"],date:"2022-06-06T14:42:00.000Z"}},{node:{id:"cfde60f01d596c43d45d040fe016c039",title:"TypeScript개념과 설치",content:'<h1 id="1-typescript란"><a href="#1-typescript%EB%9E%80" aria-hidden="true"><span class="icon icon-link"></span></a>1. TypeScript란?</h1>\n<p>   타입스크립트(TypeScript)는 자바스크립트의 슈퍼셋인 오픈소스 프로그래밍 언어이다. 마이크로소프트에서 개발, 유지하고 있으며 엄격한 문법을 지원한다. 타입스크립트는 자바스크립트 엔진을 사용하면서 커다란 애플리케이션을 개발할 수 있게 설계된 언어이다. 타입스크립트에서 자신이 원하는 타입을 정의하고 프로그래밍을 하면 자바스크립트로 컴파일되어 실행할 수 있다.  </p>\n<h1 id="2-typescript-vs-javascript"><a href="#2-typescript-vs-javascript" aria-hidden="true"><span class="icon icon-link"></span></a>2. TypeScript vs JavaScript</h1>\n<table>\n<thead>\n<tr>\n<th>분류</th>\n<th>TypeScript</th>\n<th>JavaScript</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Data Type</td>\n<td>Static Type</td>\n<td>Dynamic Type</td>\n</tr>\n<tr>\n<td>CompileTime/RunTime</td>\n<td>CompileTime</td>\n<td>Runtime</td>\n</tr>\n<tr>\n<td>생산성↑</td>\n<td>코드의 양이 많은 경우</td>\n<td>코드의 양이 적은 경우</td>\n</tr>\n<tr>\n<td>타입오류발생</td>\n<td>컴파일</td>\n<td>런타임</td>\n</tr>\n<tr>\n<td>IDE 오류</td>\n<td>잘못된 타입을 사용을 한 경우 .0오류 발생</td>\n<td>오류 발생하지 않음</td>\n</tr>\n<tr>\n<td>IDE 리팩토링</td>\n<td>TYPE이 이미 정해져있기때문에 IDE에서 리팩토링 가능</td>\n<td>IDE에서 지원하는 리팩토링은 불가(가능하더라도 정확하지 않음)</td>\n</tr>\n</tbody>\n</table>\n<h1 id="3-typescript-설치"><a href="#3-typescript-%EC%84%A4%EC%B9%98" aria-hidden="true"><span class="icon icon-link"></span></a>3. TypeScript 설치</h1>\n<p>npm을 설치한다. 기본적으로 nodejs는 설치되어있어야 한다. npm init -y 명령어 실행</p>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">npm</span> init -y\nWrote to C:<span class="token punctuation">\\</span>workspace<span class="token punctuation">\\</span>typescript<span class="token punctuation">\\</span>package.json:\n\n<span class="token punctuation">{</span>\n  <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"typescript"</span>,\n  <span class="token string">"version"</span><span class="token builtin class-name">:</span> <span class="token string">"1.0.0"</span>,\n  <span class="token string">"description"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,\n  <span class="token string">"main"</span><span class="token builtin class-name">:</span> <span class="token string">"index.js"</span>,\n  <span class="token string">"scripts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"test"</span><span class="token builtin class-name">:</span> <span class="token string">"echo <span class="token entity" title="\\&quot;">\\"</span>Error: no test specified<span class="token entity" title="\\&quot;">\\"</span> &amp;&amp; exit 1"</span>\n  <span class="token punctuation">}</span>,\n  <span class="token string">"keywords"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,\n  <span class="token string">"author"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,\n  <span class="token string">"license"</span><span class="token builtin class-name">:</span> <span class="token string">"ISC"</span>\n<span class="token punctuation">}</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>package.json 파일이 생성되었다.</p>\n<p>이제 TypeScript를 설치한다.</p>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> typescript\n\nadded <span class="token number">1</span> package, and audited <span class="token number">2</span> packages <span class="token keyword">in</span> 2s\n\nfound <span class="token number">0</span> vulnerabilities<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id="4-typescript-모듈-조회-사이트"><a href="#4-typescript-%EB%AA%A8%EB%93%88-%EC%A1%B0%ED%9A%8C-%EC%82%AC%EC%9D%B4%ED%8A%B8" aria-hidden="true"><span class="icon icon-link"></span></a>4. TypeScript 모듈 조회 사이트</h1>\n<p><a href="https://www.typescriptlang.org/dt/search?search=" target="_blank" rel="nofollow noopener noreferrer">type search - typescriptlang.org</a></p>\n<p>예) react검색시 아래와같이 조회됨. @types..로 시작하는 모듈이 typescript로 개발된 패키지이다.</p>\n<pre class="language-bash line-numbers"><code class="language-bash"><span class="token function">npm</span> i react\n<span class="token function">npm</span> i @types/react --save-dev<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<h1 id="5-마치며"><a href="#5-%EB%A7%88%EC%B9%98%EB%A9%B0" aria-hidden="true"><span class="icon icon-link"></span></a>5. 마치며</h1>\n<p>  최근들어 Javascript로 개발된 framework의 문서들에도 타입스크립트의 내용이 점점 추가 되고 있고, 최근 개발된 framework의 소스를 확인해봐도 대부분 타입스크립트로 개발되어 있음을 알 수 있었다. 규모가 있는 프로그램을 개발하려고 한다면 Typescript는 이제 기본이 된듯하다.</p>\n<h1 id="6-참조"><a href="#6-%EC%B0%B8%EC%A1%B0" aria-hidden="true"><span class="icon icon-link"></span></a>6. 참조</h1>\n<ul>\n<li><a href="https://ko.wikipedia.org/wiki/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8" target="_blank" rel="nofollow noopener noreferrer">타입스크립트 - 위키백과</a></li>\n<li><a href="https://any-ting.tistory.com/97" target="_blank" rel="nofollow noopener noreferrer">[TypeScript] TypeScript 개념 및 사용하는 이유</a>  </li>\n<li><a href="https://www.inflearn.com/course/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0" target="_blank" rel="nofollow noopener noreferrer">타입스크립트 시작하기 - 인프런</a></li>\n</ul>\n',lang:"ko",category:["TypeScript"],date:"2022-05-29T10:33:00.000Z"}},{node:{id:"f2d3dcd5d04ec8eaab84d8a870d01cbf",title:"Vue CLI 빌드시 public 폴더 하위 특정폴더 제외하기",content:'<h1 id="배경"><a href="#%EB%B0%B0%EA%B2%BD" aria-hidden="true"><span class="icon icon-link"></span></a>배경</h1>\n<p>Vue.js CLI에서 빌드시 public 폴더중에 일부 폴더는 제외를 하고 싶었다. 이유는 해당 폴더는 파일업로드가 되는 폴더라서\n굳이 빌드할때 copy가 될 필요는 없었다. 그래서 해당 방법을 한참 찾았다. 그리고는 결국 찾아내고 말았다.</p>\n<h1 id="환경"><a href="#%ED%99%98%EA%B2%BD" aria-hidden="true"><span class="icon icon-link"></span></a>환경</h1>\n<p>Vue CLI: 4.5.17</p>\n<h1 id="진행"><a href="#%EC%A7%84%ED%96%89" aria-hidden="true"><span class="icon icon-link"></span></a>진행</h1>\n<p>vue.config.js 파일에 아래부분을 추가한다.</p>\n<pre class="language-json line-numbers"><code class="language-json">module.exports = <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  chainWebpack<span class="token operator">:</span> config => <span class="token punctuation">{</span>\n    config.plugin(\'copy\').tap((<span class="token punctuation">[</span>options<span class="token punctuation">]</span>) => <span class="token punctuation">{</span>\n      options<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.ignore.push(\'files<span class="token comment">/**\')\n      return [options]\n    })\n  }\n  //...\n}</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id="결론"><a href="#%EA%B2%B0%EB%A1%A0" aria-hidden="true"><span class="icon icon-link"></span></a>결론</h1>\n<p>해당 files/** 에 해당하는 부분에 제외하고자 하는 폴더를 넣고 빌드하니 정상 제외된다.</p>\n',lang:"ko",category:["FrontEnd","Vue3"],date:"2022-05-22T10:41:00.000Z"}},{node:{id:"9a9b3d09b87560b69dfe45e23ab33975",title:"Shell Script 변수",content:'<h1 id="배경"><a href="#%EB%B0%B0%EA%B2%BD" aria-hidden="true"><span class="icon icon-link"></span></a>배경</h1>\n<p>Raspberry PI에 우분투 리눅스를 사용하고 있다. 해당 리눅스에 DB 자동 백업을 하려고 하다보니<br>\n자연스럽게 쉘스크립트를 사용할 상황이 되었다. 그래서 급하게 필요한 내용만 인터넷에서 검색을 해서 습득을 했다.</p>\n<h1 id="문법"><a href="#%EB%AC%B8%EB%B2%95" aria-hidden="true"><span class="icon icon-link"></span></a>문법</h1>\n<p>변수 선언하는 방법은 간단하다. 변수명=변수값 이다. 주의할 점은 다른언어에서와 같이 = 앞뒤로 공백이 들어가면 안된다.\n간단해서 아래 예제만 확인하면 금방 익힐수 있다.</p>\n<pre class="language-bash line-numbers"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>\n<span class="token assign-left variable">NUM</span><span class="token operator">=</span><span class="token number">1234</span> <span class="token comment">#숫자형</span>\n<span class="token assign-left variable">STRING</span><span class="token operator">=</span><span class="token string">"HELLO WORLD!"</span> <span class="token comment">#문자형</span>\nSTRING2 <span class="token operator">=</span> <span class="token string">"안되네?"</span> <span class="token comment">#ERROR: 변수할당 불가함</span>\n\n<span class="token builtin class-name">echo</span> <span class="token variable">$NUM</span> <span class="token comment">#1234</span>\n<span class="token builtin class-name">echo</span> <span class="token variable">$STRING</span> <span class="token comment">#HELLO WORLD!</span>\n<span class="token builtin class-name">echo</span> <span class="token variable">$STRING2</span> <span class="token comment">#빈공백만 출력됨</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id="활용"><a href="#%ED%99%9C%EC%9A%A9" aria-hidden="true"><span class="icon icon-link"></span></a>활용</h2>\n<p>스토리지에 백업할 때 연도별, 월별로 폴더를 생성 하는 로직이다.</p>\n<pre class="language-bash line-numbers"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>\n<span class="token punctuation">..</span>.<span class="token punctuation">(</span>생략<span class="token punctuation">)</span>\n<span class="token assign-left variable">DIR</span><span class="token operator">=</span>/storage/db-backup/<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y<span class="token variable">)</span></span>/<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%m<span class="token variable">)</span></span>\n<span class="token function">mkdir</span> <span class="token variable">$DIR</span> -p <span class="token comment">#폴더생성 </span>\nMV *.backup <span class="token variable">$DIR</span> <span class="token comment">#.backup 파일 신규 생성 폴더로 복사</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n',lang:"ko",category:["Linux","Shell Script"],date:"2022-05-13T11:28:00.000Z"}},{node:{id:"6f206b7e1af744133ba2de8a38c10a06",title:"20220508 왼쪽 네비게이션바 생성",content:'<p>블로그에 글이 하나둘 늘어간다. 그에 따라서 글을 찾아보기가 힘들어서 카테고리별로 왼쪽 네비게이션바가 나오도록 개발했다.</p>\n<p><img src="/img/ko/2022/20220508001.png" alt="블로그 왼쪽 메뉴 생성"></p>\n',lang:"ko",category:["Blog","블로그개발일지"],date:"2022-05-08T04:49:00.000Z"}},{node:{id:"fb877abb2c6fb3c90c05b4f674614009",title:"리눅스 하드디스크 파일시스템 NTFS에서 EXT4 으로 변경",content:'<h1 id="서론"><a href="#%EC%84%9C%EB%A1%A0" aria-hidden="true"><span class="icon icon-link"></span></a>서론</h1>\n<p>이번에 DAS를 구매하게 되었다. 윈도우에서 사용하던 하드디스크를 라즈베리파이에 연결했다.\n그래서 리눅스에서 관리되기 때문에 EXT4로 관리하는게 훨씬 성능, 안정성면에서\n나을 것 같아서 EXT4로 변환했다.</p>\n<h1 id="하드디스크를-확인"><a href="#%ED%95%98%EB%93%9C%EB%94%94%EC%8A%A4%ED%81%AC%EB%A5%BC-%ED%99%95%EC%9D%B8" aria-hidden="true"><span class="icon icon-link"></span></a>하드디스크를 확인</h1>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">fdisk</span> -l\n<span class="token punctuation">..</span>.\nDisk /dev/sdd: <span class="token number">465.78</span> GiB, <span class="token number">500107862016</span> bytes, <span class="token number">976773168</span> sectors\nDisk model: TerraMaster\nUnits: sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes\nSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">4096</span> bytes\nI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">4096</span> bytes / <span class="token number">4096</span> bytes\nDisklabel type: dos\nDisk identifier: 0xd2******\n                     \nDevice     Boot Start       End   Sectors   Size Id Type\n/dev/sdd1        <span class="token number">2048</span> <span class="token number">976769023</span> <span class="token number">976766976</span> <span class="token number">465</span>.8G  <span class="token number">7</span> HPFS/NTFS/exFAT<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id="하드디스크-마운트"><a href="#%ED%95%98%EB%93%9C%EB%94%94%EC%8A%A4%ED%81%AC-%EB%A7%88%EC%9A%B4%ED%8A%B8" aria-hidden="true"><span class="icon icon-link"></span></a>하드디스크 마운트</h1>\n<p>윈도우에서 포맷한 드라이브여서 그런지 아래의 메시지가 뜬다.</p>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">mount</span> /dev/sdd1 /mnt/tmp\nThe disk contains an unclean <span class="token function">file</span> system <span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span>.\nThe <span class="token function">file</span> system wasn\'t safely closed on Windows. Fixing.<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span></span></code></pre>\n<p>하드디스크를 백업한다. (과정생략)</p>\n<h1 id="윈도우-파티션-삭제"><a href="#%EC%9C%88%EB%8F%84%EC%9A%B0-%ED%8C%8C%ED%8B%B0%EC%85%98-%EC%82%AD%EC%A0%9C" aria-hidden="true"><span class="icon icon-link"></span></a>윈도우 파티션 삭제</h1>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">fdisk</span> /dev/sdd\n\nWelcome to <span class="token function">fdisk</span> <span class="token punctuation">(</span>util-linux <span class="token number">2.34</span><span class="token punctuation">)</span>.\nChanges will remain <span class="token keyword">in</span> memory only, <span class="token keyword">until</span> you decide to <span class="token function">write</span> them.\nBe careful before using the <span class="token function">write</span> command.\n\n\nCommand <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>:<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>명령어 p를 입력하면 현재 선택된 하드 디스크가 확인된다.</p>\n<pre class="language-bash line-numbers"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: p\nDisk /dev/sdd: <span class="token number">465.78</span> GiB, <span class="token number">500107862016</span> bytes, <span class="token number">976773168</span> sectors\nDisk model: TerraMaster\nUnits: sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes\nSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">4096</span> bytes\nI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">4096</span> bytes / <span class="token number">4096</span> bytes\nDisklabel type: dos\nDisk identifier: 0xd2******\n\nDevice     Boot Start       End   Sectors   Size Id Type\n/dev/sdd1        <span class="token number">2048</span> <span class="token number">976769023</span> <span class="token number">976766976</span> <span class="token number">465</span>.8G  <span class="token number">7</span> HPFS/NTFS/exFAT<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>백업완료 후 하드디스크 확인하고 이상이 없으면 d를 입력한다.</p>\n<pre class="language-bash line-numbers"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: d\nSelected partition <span class="token number">1</span>\nPartition <span class="token number">1</span> has been deleted.<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span></span></code></pre>\n<p>파티션 삭제완료</p>\n<h1 id="리눅스-ext4-파티션-생성"><a href="#%EB%A6%AC%EB%88%85%EC%8A%A4-ext4-%ED%8C%8C%ED%8B%B0%EC%85%98-%EC%83%9D%EC%84%B1" aria-hidden="true"><span class="icon icon-link"></span></a>리눅스 Ext4 파티션 생성</h1>\n<p>n을 입력해서 새로운 파티션 생성. 이후 디폴트로 입력해준다.</p>\n<pre class="language-bash line-numbers"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: n\nPartition <span class="token builtin class-name">type</span>\n   p   primary <span class="token punctuation">(</span><span class="token number">0</span> primary, <span class="token number">0</span> extended, <span class="token number">4</span> <span class="token function">free</span><span class="token punctuation">)</span>\n   e   extended <span class="token punctuation">(</span>container <span class="token keyword">for</span> logical partitions<span class="token punctuation">)</span>\nSelect <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>: p\nPartition number <span class="token punctuation">(</span><span class="token number">1</span>-4, default <span class="token number">1</span><span class="token punctuation">)</span>: <span class="token number">1</span>\nFirst sector <span class="token punctuation">(</span><span class="token number">2048</span>-976773167, default <span class="token number">2048</span><span class="token punctuation">)</span>:\nLast sector, +/-sectors or +/-size<span class="token punctuation">{</span>K,M,G,T,P<span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token number">2048</span>-976773167, default <span class="token number">976773167</span><span class="token punctuation">)</span>:\n\nCreated a new partition <span class="token number">1</span> of <span class="token builtin class-name">type</span> <span class="token string">\'Linux\'</span> and of size <span class="token number">465.8</span> GiB.\nPartition <span class="token comment">#1 contains a ntfs signature.</span>\n\nDo you want to remove the signature? <span class="token punctuation">[</span>Y<span class="token punctuation">]</span>es/<span class="token punctuation">[</span>N<span class="token punctuation">]</span>o: y\n\nThe signature will be removed by a <span class="token function">write</span> command.<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>결과확인을 위해 p입력</p>\n<pre class="language-bash line-numbers"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: p\nDisk /dev/sdd: <span class="token number">465.78</span> GiB, <span class="token number">500107862016</span> bytes, <span class="token number">976773168</span> sectors\nDisk model: TerraMaster\nUnits: sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes\nSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">4096</span> bytes\nI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">4096</span> bytes / <span class="token number">4096</span> bytes\nDisklabel type: dos\nDisk identifier: 0xd2******\n\nDevice     Boot Start       End   Sectors   Size Id Type\n/dev/sdd1        <span class="token number">2048</span> <span class="token number">976773167</span> <span class="token number">976771120</span> <span class="token number">465</span>.8G <span class="token number">83</span> Linux\n\nFilesystem/RAID signature on partition <span class="token number">1</span> will be wiped.<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id="변경사항-저장"><a href="#%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD-%EC%A0%80%EC%9E%A5" aria-hidden="true"><span class="icon icon-link"></span></a>변경사항 저장</h1>\n<p>명령어 w를 입력을 해야지만 저장이 된다. 그냥 종료하면 변경사항이 저장이 되질 않는다.</p>\n<pre class="language-bash line-numbers"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: w\nThe partition table has been altered.\nSyncing disks.<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span></span></code></pre>\n<h1 id="ext4로-생성"><a href="#ext4%EB%A1%9C-%EC%83%9D%EC%84%B1" aria-hidden="true"><span class="icon icon-link"></span></a>EXT4로 생성</h1>\n<p>Creating journal (262144 blocks): 이 부분에서도 그냥 엔터를 입력했다.\n생성 후 정상 </p>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">sudo</span> mkfs.ext4 /dev/sdd1\n<span class="token function">mke2fs</span> <span class="token number">1.45</span>.5 <span class="token punctuation">(</span>07-Jan-2020<span class="token punctuation">)</span>\nCreating filesystem with <span class="token number">122096390</span> 4k blocks and <span class="token number">30531584</span> inodes\nFilesystem UUID: 6d374378-97b2-4f88-b3d8-44b39764430c\nSuperblock backups stored on blocks:\n        <span class="token number">32768</span>, <span class="token number">98304</span>, <span class="token number">163840</span>, <span class="token number">229376</span>, <span class="token number">294912</span>, <span class="token number">819200</span>, <span class="token number">884736</span>, <span class="token number">1605632</span>, <span class="token number">2654208</span>,\n        <span class="token number">4096000</span>, <span class="token number">7962624</span>, <span class="token number">11239424</span>, <span class="token number">20480000</span>, <span class="token number">23887872</span>, <span class="token number">71663616</span>, <span class="token number">78675968</span>,\n        <span class="token number">102400000</span>\n\nAllocating group tables: <span class="token keyword">done</span>\nWriting inode tables: <span class="token keyword">done</span>\nCreating journal <span class="token punctuation">(</span><span class="token number">262144</span> blocks<span class="token punctuation">)</span>:\n<span class="token keyword">done</span>\nWriting superblocks and filesystem accounting information:\n<span class="token keyword">done</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id="결과-확인"><a href="#%EA%B2%B0%EA%B3%BC-%ED%99%95%EC%9D%B8" aria-hidden="true"><span class="icon icon-link"></span></a>결과 확인</h1>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">fdisk</span> -l\n<span class="token punctuation">..</span>.\nDisk /dev/sdd: <span class="token number">465.78</span> GiB, <span class="token number">500107862016</span> bytes, <span class="token number">976773168</span> sectors\nDisk model: TerraMaster\nUnits: sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes\nSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">4096</span> bytes\nI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">4096</span> bytes / <span class="token number">4096</span> bytes\nDisklabel type: dos\nDisk identifier: 0xd2******\n\nDevice     Boot Start       End   Sectors   Size Id Type\n/dev/sdd1        <span class="token number">2048</span> <span class="token number">976773167</span> <span class="token number">976771120</span> <span class="token number">465</span>.8G <span class="token number">83</span> Linux<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>정상적으로 전환완료!</p>\n',lang:"ko",category:["Raspberry Pi","Ubuntu Linux"],date:"2022-05-08T03:22:00.000Z"}},{node:{id:"b7126791b1897fd2a89ca9c8f13c3329",title:"Gridsome Sitemap Plugin 적용",content:'\x3c!-- tags: [\'Gridsome\', \'sitemap\', \'SEO\'] --\x3e\n<h1 id="배경"><a href="#%EB%B0%B0%EA%B2%BD" aria-hidden="true"><span class="icon icon-link"></span></a>배경</h1>\n<p>검색엔진 최적화(SEO) 중에 해야할 일중 하나가 sitemap을 생성하는 일이다.<br>\nsitemap은 사이트의 내용들을 담은 url들을 정리해놓은 xml파일이다.\n보통 robots.txt파일에 sitemap경로를 정의하기도 하지만 웹사이트 url 뒤에 /sitemap.xml을 입력해보면 보통 출력된다.\n예를들면 <a href="https://blog.zerost.com/sitemap.xml" target="_blank" rel="nofollow noopener noreferrer">https://blog.zerost.com/sitemap.xml</a> 처럼 말이다. </p>\n<h1 id="설치"><a href="#%EC%84%A4%EC%B9%98" aria-hidden="true"><span class="icon icon-link"></span></a>설치</h1>\n<p><a href="https://gridsome.org/plugins/@gridsome/plugin-sitemap" target="_blank" rel="nofollow noopener noreferrer">Gridsome plugin</a>에서 확인을 하게되면 </p>\n<blockquote>\n<p>@gridsome/plugin-sitemap</p>\n</blockquote>\n<p>을 찾는다. 문서가 잘되어있어서 왠만한건 해당 문서만 확인하고 설치가 가능하다.</p>\n<p>npm</p>\n<pre class="language-bash line-numbers"><code class="language-bash"><span class="token function">npm</span> i @gridsome/plugin-sitemap<span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p>yarn</p>\n<pre class="language-bash line-numbers"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> @gridsome/plugin-sitemap<span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p>이렇게 설치를 하고 나서 나의 경우는 한해서 아래와 같이 설정만 해주면 끝이난다. sitemap.xml 파일은 사이트를 build를 한 경우만 생성이 되고 develop으로 서버를 부팅했을 경우는 접근이 안된다. </p>\n<pre class="language-json line-numbers"><code class="language-json"><span class="token punctuation">{</span>\n    use<span class="token operator">:</span> <span class="token string">"@gridsome/plugin-sitemap"</span><span class="token punctuation">,</span>\n    options<span class="token operator">:</span> <span class="token punctuation">{</span>\n        config<span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">"/ko/**"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                changefreq<span class="token operator">:</span> <span class="token string">"weekly"</span><span class="token punctuation">,</span>\n                priority<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>\n                lastmod<span class="token operator">:</span> <span class="token string">"2022-04-12"</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token property">"/about"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                changefreq<span class="token operator">:</span> <span class="token string">"monthly"</span><span class="token punctuation">,</span>\n                priority<span class="token operator">:</span> <span class="token number">0.7</span><span class="token punctuation">,</span>\n                lastmod<span class="token operator">:</span> <span class="token string">"2022-04-12"</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id="결론"><a href="#%EA%B2%B0%EB%A1%A0" aria-hidden="true"><span class="icon icon-link"></span></a>결론</h1>\n<p>Markdown 파일들을 읽어서 자동으로 sitemap.xml까지 만들어주는 Gridsome 엔진. 설치도 간단하고, 문서도 친절하게 잘나와있다. 너무나도 마음에 든다.<br>\n해당 설정이 변경되면 이 문서도 같이 수정하도록 하겠다. 약간 수정이 필요한 것 같은게 lastmod 속성이 MD파일의 속성을 읽어서 출력해 줬으면 더 좋을 것 같다는 생각이 든다. 시간 되면 그렇게 할수있도록 수정을 조금 해봐야겠다.</p>\n<h1 id="참조"><a href="#%EC%B0%B8%EC%A1%B0" aria-hidden="true"><span class="icon icon-link"></span></a>참조</h1>\n<ul>\n<li><a href="https://gridsome.org/plugins/@gridsome/plugin-sitemap" target="_blank" rel="nofollow noopener noreferrer">@gridsome/plugin-sitemap</a></li>\n</ul>\n',lang:"ko",category:["FrontEnd","Gridsome"],date:"2022-04-18T21:53:00.000Z"}},{node:{id:"7fc4cc18e36e349a6bfc2db38fb45d52",title:"Gridsome 구글 애널리틱스 적용하기",content:'\x3c!-- tags: [\'Gridsome\', \'구글애널리틱스\', \'GoogleAnalytics\', \'analytics\']--\x3e\n<h1 id="배경"><a href="#%EB%B0%B0%EA%B2%BD" aria-hidden="true"><span class="icon icon-link"></span></a>배경</h1>\n<p>구글 애널리틱스를 적용하게 되면 사이트에 몇명이 방문하는지, 어떤 경로로, 어떤 검색어로 찾아오는지 알 수 있다.\n뭐 신생 블로그다 보니까 당연히 들어오는 사람도 없겠지만, 언젠가는 내가 쓴 글이 다른사람에게 도움이 될 수 도 있는 것이라고 생각한다.<br>\n그래서 반응도 확인할 겸 등록하게 되었다.</p>\n<h1 id="설치"><a href="#%EC%84%A4%EC%B9%98" aria-hidden="true"><span class="icon icon-link"></span></a>설치</h1>\n<p>Gridsome에 플러그인이 있는지 처음 확인을 했었다. </p>\n<blockquote>\n<p>@gridsome/plugin-google-analytics</p>\n</blockquote>\n<p>라는것이 있기에 이걸 적용하면 되는 줄 알았다. 그런데 이 플러그인을 적용했는데도, 크롬 개발자 도구에 네트워크 요청도 없었다. 이상하다고 생각해서 문서를 보다보니 <a href="https://github.com/MatteoGabriele/vue-analytics/blob/master/README.md" target="_blank" rel="nofollow noopener noreferrer">vue-analytics</a>를 참조해서 개발이 된걸로 추측이 된다.  </p>\n<p>그런데 사이트 들어가보니...</p>\n<blockquote>\n<p>⚠️ Sorry but vue-analytics is not longer maintained. I would suggest you to switch to vue-gtag. With love, the guy who made the package.</p>\n</blockquote>\n<p>라고 되어있다. vue-gtag를 사용하란다..\n그래서 gtag로 검색을 했더니</p>\n<blockquote>\n<p>gridsome-plugin-gtag</p>\n</blockquote>\n<p>패키지가 있다. 이 패키지를 설치했다.</p>\n<p>npm</p>\n<pre class="language-bash line-numbers"><code class="language-bash"><span class="token function">npm</span> i gridsome-plugin-gtag<span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p>yarn</p>\n<pre class="language-bash line-numbers"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> gridsome-plugin-gtag<span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p>그리고</p>\n<p>gridsome.config.js 파일에 추가를 했더니 정상작동한다!</p>\n<pre class="language-json line-numbers"><code class="language-json"><span class="token punctuation">{</span>\n    use<span class="token operator">:</span> \'gridsome-plugin-gtag\'<span class="token punctuation">,</span>\n    options<span class="token operator">:</span> <span class="token punctuation">{</span>\n        config<span class="token operator">:</span> <span class="token punctuation">{</span>\n            id<span class="token operator">:</span> \'<span class="token punctuation">[</span>GOOGLE_ANALYTICS_ID<span class="token punctuation">]</span>\'\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id="결론"><a href="#%EA%B2%B0%EB%A1%A0" aria-hidden="true"><span class="icon icon-link"></span></a>결론</h1>\n<p>설치하고 났더니 방문자를 알 수 있어서 좋다.<br>\n근데, Gridsome plugins 페이지에서 @gridsome/plugin-google-analytics 이건 좀 지워야 되는거 아닌지 모르겠다.</p>\n<h1 id="참조"><a href="#%EC%B0%B8%EC%A1%B0" aria-hidden="true"><span class="icon icon-link"></span></a>참조</h1>\n<ul>\n<li><a href="https://gridsome.org/plugins/gridsome-plugin-gtag" target="_blank" rel="nofollow noopener noreferrer">Gridsome Plugin to incorporate Google Tag</a></li>\n<li><a href="https://gridsome.org/plugins/@gridsome/plugin-google-analytics" target="_blank" rel="nofollow noopener noreferrer">@gridsome/plugin-google-analytics</a></li>\n<li><a href="https://github.com/MatteoGabriele/vue-analytics/blob/master/README.md" target="_blank" rel="nofollow noopener noreferrer">vue-analytics</a></li>\n</ul>\n',lang:"ko",category:["FrontEnd","Gridsome"],date:"2022-04-17T23:42:00.000Z"}},{node:{id:"f0979249b4203593a1e07be3ccb1b458",title:"블로그를 Gridsome을 선택한 이유",content:'\x3c!-- tags: [\'Gridsome\', \'vue3\', \'vuejs\'] --\x3e\n<h1 id="배경"><a href="#%EB%B0%B0%EA%B2%BD" aria-hidden="true"><span class="icon icon-link"></span></a>배경</h1>\n<p><a href="/ko/posts/blog/%EC%97%90%EC%84%B8%EC%9D%B4/%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%95%9C-%EC%9D%B4%EC%9C%A0%EC%99%80-%EB%AA%A9%ED%91%9C">블로그를 시작한 이유와 목표</a>에서 작성했듯이 블로그를 운영하고 싶었고,정적인 사이트를 개발해서 <a href="https://pages.github.com/" target="_blank" rel="nofollow noopener noreferrer">github pages</a>에 배포를 하고 싶었다. 이걸 사용함으로서 비용도 없고 원하는데로 사이트를 구성 할수도 있었을 줄 알았다.</p>\n<h1 id="진행"><a href="#%EC%A7%84%ED%96%89" aria-hidden="true"><span class="icon icon-link"></span></a>진행</h1>\n<ol>\n<li>github 블로그를 어떻게 개발하는지에 대해서 검색하다보니 <a href="https://jekyllrb.com/" target="_blank" rel="nofollow noopener noreferrer">jekyll</a>이 검색되었다.<br>\n블로그 테마 갯수도 많고 꽤나 활성화 되어 있는듯 했다.\n일단 인터넷에 나와있는 정보를 바탕으로 jekyll과 테마를 설치했다.\n근데, 문제는 테마 그대로 사용할 생각이 있는게 아니고 조금씩 수정해가면서 사용하고 싶었는데, 루비를 처음 접하고\n처음 접하다보니 도저히 수정할 엄두가 나질 않았다.<br>\n그래서 이건 아니다 싶어서 node.js로 된 블로그 엔진을 찾았다. 그래야 조금이라도 수정할 수 있을꺼라고 생각했다.  </li>\n<li>node.js용 블로그 프레임워크. <a href="https://hexo.io/" target="_blank" rel="nofollow noopener noreferrer">Hexo</a>를 찾았다. 이것도 테마가 있긴 있었는데,\n확실히 jekyll보다는 적은듯했다. 여튼, 그중에서 가장 심플하면서도 직관적인 테마를 선택했다. 그래서 설치했는데,\n생각보다 내가 원하는데로 작동하지는 않는듯했고, 수정해야겠다 싶어서 소스를 확인하는데도, 이것 또한 만만하게 볼만하지 않았다.\n그래서 그냥 Vue.js로 된 블로그 프레임워크를 찾아야겠다 싶어서 이것도 결국 삭제했다.  </li>\n<li>Vue.js 로 개발된 블로그를 검색했다. 그랬더니 가장 유명한게 <a href="https://vuepress.vuejs.org/" target="_blank" rel="nofollow noopener noreferrer">Vuepress</a>였다.\nvuejs에서 만든 프레임워크인데, 이것도 깔끔하고 괜찮긴한데, 내가 원하는 레이아웃을 만들어 내기에는 조금 문제가 있었다.\n일단 복잡하다. 테마를 새로 만드는 과정도 생각보다 어려웠고 꼬박 이틀동안 연구를 했는데도 쉽지 않았다.<br>\n(물론 아직 능력이 부족해서 그런 부분이 컸다.)<br>\n그리고 Document가 꽤나 부실했다. 그것만보고는 어떻게 사용해야하는지 이해가 쉽지 않았다.  </li>\n<li>대망의 마지막 Gridsome. Vuepress관련해서 검색을 하다보니 우연찮게 vuepress와 gridsome을 비교해놓은 블로그가\n검색이 되었다. 그래서 혹시나 해서 Gridsome에 들어가서 보니 괜찮아 보였다. GraphQL이라는것도 적용이 되어있고,\n문서도 꽤나 구체적으로 나와있는듯했다. 그래서 설치를 해보니, 정말 내가 원하는 그것이었다.<br>\n아주 기초적으로 md파일들을 읽어와서 메모리에 올린후 GraphQL로 쿼리를 날려서 데이터를 산출하고 Vue.js를 통해서\n화면을 렌더링. 그리고 무엇보다도 쉽게 잘 구현되어있고, 문서가 Vuepress에 비해서 아주 이해하기 쉽고 직관적이었다.\n100% 만족은 아니지만 상당후 문서만 보고도 이해할 수 있는 수준이었다. 지금 이렇게 조금씩 만들어가는데, 너무 재밌다.</li>\n</ol>\n<h1 id="결론"><a href="#%EA%B2%B0%EB%A1%A0" aria-hidden="true"><span class="icon icon-link"></span></a>결론</h1>\n<p>정적 블로그를 운영할 계획이라면 각자에게 맞는 정적 블로그 생성 엔진을 찾아서 사용하는게 맞을 것 같다.\n나는 최초에 접근성이 쉽고, 각 페이지 컨트롤도 쉬운 엔진을 찾았는데, 결국 Gridsome에 안착하게 되었다.\n아주 만족스럽다. 기본적인 파싱 구조를 갖춰진 상태에서 블로그 디자인부터 퍼블리싱까지 할 예정이라서\n정말 딱 이었다. 다만 걱정인게 Gridsome github에 마지막 커밋이 2020년 9월 23일인데 그 이후로 무언가 커밋이 없는게 약간 불안하긴 하다. 관리가 되고 있긴한거겠지.</p>\n',lang:"ko",category:["FrontEnd","Gridsome"],date:"2022-04-14T16:21:00.000Z"}},{node:{id:"762bea419387b7b60308a47ff34c1171",title:"라즈베리파이 우분투리눅스 저장소변경",content:'<h1 id="환경"><a href="#%ED%99%98%EA%B2%BD" aria-hidden="true"><span class="icon icon-link"></span></a>환경</h1>\n<p>Ubuntu 20.04.4 LTS(Raspberry Pi) 버전 기준<br>\n※ 데스크탑용 리눅스와 다름</p>\n<h1 id="서론"><a href="#%EC%84%9C%EB%A1%A0" aria-hidden="true"><span class="icon icon-link"></span></a>서론</h1>\n<p>리눅스를 사용하다보면 패키지 업그레이드를 해줘야한다.\n그런데 업데이트 사이트가 해외사이트라 그런지 인터넷 연결 속도가 느려서 답답합을 느꼈다.\n그래서 국내 사이트로 업데이트 사이트를 변경해보았다.<br>\n<a href="https://launchpad.net/ubuntu/+archivemirrors" target="_blank" rel="nofollow noopener noreferrer">Official Archive Mirrors for Ubuntu</a>에서 확인한 결과\nUbuntu Ports 중 대역폭이 가장 좋은 Harukasan (Pukyong National University) - Ubuntu Ports를 선택했다.\n그래서 이 사이트를 기준으로 라즈베리파이 우분투 리눅스 저장소를 변경해보았다.</p>\n<h1 id="미러사이트주소로-변경하기"><a href="#%EB%AF%B8%EB%9F%AC%EC%82%AC%EC%9D%B4%ED%8A%B8%EC%A3%BC%EC%86%8C%EB%A1%9C-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0" aria-hidden="true"><span class="icon icon-link"></span></a>미러사이트주소로 변경하기</h1>\n<ol>\n<li>현재 sources.list 파일 백업해두기(수정이 잘못되었을경우 되돌리기위한 용도)</li>\n</ol>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">cp</span> /etc/apt/sources.list /etc/apt/sources.list.backup<span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<ol start="2">\n<li>수정하기</li>\n</ol>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">sed</span> -i <span class="token string">\'s/ports.ubuntu.com/ftp.harukasan.org/g\'</span> /etc/apt/sources.list<span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<ol start="3">\n<li>업데이트&#x26;업그레이드하기</li>\n</ol>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> update\n$ <span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<p>정상적으로 업데이트되면 정상완료.</p>\n<h1 id="결론"><a href="#%EA%B2%B0%EB%A1%A0" aria-hidden="true"><span class="icon icon-link"></span></a>결론</h1>\n<p>업데이트를 했는데, 사실 공식사이트와 크게 차이가 나질 않은 것 같다. 좀 더 지켜봐야겠다.\n아무래도 업데이트 양이 많을 때 속도를 확인하는게 가장 좋을 듯 싶다.</p>\n<h2 id="참고자료"><a href="#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C" aria-hidden="true"><span class="icon icon-link"></span></a>[참고자료]</h2>\n<ul>\n<li><a href="https://wonpaper.tistory.com/347" target="_blank" rel="nofollow noopener noreferrer">라즈베리파이 미러사이트 주소 변경하기</a>  </li>\n<li><a href="https://launchpad.net/ubuntu/+archivemirrors" target="_blank" rel="nofollow noopener noreferrer">Official Archive Mirrors for Ubuntu</a></li>\n</ul>\n',lang:"ko",category:["Raspberry Pi","Ubuntu Linux"],date:"2022-04-13T16:40:00.000Z"}},{node:{id:"a373b5ffd308adf6bc937cc4f6444c67",title:"Postgresql 세션 정보확인 및 종료",content:'<p>PostgreSQL 13.3 버전 기준</p>\n<p>현재 접속중인 세션 정보 목록 확인\n현재 접속중인 세션의 PID 항목을 복사한다.</p>\n<pre class="language-sql line-numbers"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> pg_stat_activity<span class="token punctuation">;</span><span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p>쿼리 실행 취소\n쿼리 실행 취소할 세션의 PID를 넣고 쿼리를 실행하면 해당 쿼리는 종료된다.</p>\n<pre class="language-sql line-numbers"><code class="language-sql"><span class="token keyword">SELECT</span> pg_cancel_backend<span class="token punctuation">(</span>PID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p>세션을 종료할려는 경우 아래 쿼리에 PID를 넣고 실행하면, 세션 강제종료된다.</p>\n<pre class="language-sql line-numbers"><code class="language-sql"><span class="token keyword">SELECT</span> pg_terminate_backend<span class="token punctuation">(</span>PID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n',lang:"ko",category:["Database","Postgresql"],date:"2022-04-12T23:04:30.000Z"}},{node:{id:"3782210744898086a04a701bc49d89fc",title:"Nodejs Yarn 설치",content:'<h1 id="yarn-설치"><a href="#yarn-%EC%84%A4%EC%B9%98" aria-hidden="true"><span class="icon icon-link"></span></a>yarn 설치</h1>\n<p><a href="https://yarnpkg.com" target="_blank" rel="nofollow noopener noreferrer">yarn 공식사이트</a>에 들어갔다. <a href="https://yarnpkg.com/getting-started/install" target="_blank" rel="nofollow noopener noreferrer">설치페이지</a>에서 확인하니 노트 16.10부터 corepack이라는 것에 기본 탑재 되었나보다.\n아래의 명령어만 호출해주면 끝. </p>\n<blockquote>\n<p>Node.js >=16.10<br>\nCorepack is included by default with all Node.js installs, but is currently opt-in. To enable it, run the following command:</p>\n</blockquote>\n<pre class="language-bash line-numbers"><code class="language-bash">corepack <span class="token builtin class-name">enable</span><span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p>노드가 16.10미만 버전인경우</p>\n<blockquote>\n<p>Node.js &#x3C;16.10<br>\nCorepack isn\'t included with Node.js in versions before the 16.10; to address that, run:</p>\n</blockquote>\n<pre class="language-bash line-numbers"><code class="language-bash"><span class="token function">npm</span> i -g corepack<span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p>설치해주면 된다.</p>\n<hr>\n<h1 id="트러블슈팅"><a href="#%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85" aria-hidden="true"><span class="icon icon-link"></span></a>트러블슈팅</h1>\n<h2 id="오류현상"><a href="#%EC%98%A4%EB%A5%98%ED%98%84%EC%83%81" aria-hidden="true"><span class="icon icon-link"></span></a>[오류현상]</h2>\n<p>환경: Windows 10 Home<br>\n증상: corepack enable 명령어 실행시 아래와 같은 오류 발생</p>\n<pre class="language-powershell line-numbers"><code class="language-powershell"><span class="token function">PS</span> C:\\> corepack enable\nInternal Error: EPERM: operation not permitted<span class="token punctuation">,</span> open <span class="token string">\'C:\\Program Files\\nodejs\\pnpm\'</span>\nError: EPERM: operation not permitted<span class="token punctuation">,</span> open <span class="token string">\'C:\\Program Files\\nodejs\\pnpm\'</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span></span></code></pre>\n<h2 id="원인파악"><a href="#%EC%9B%90%EC%9D%B8%ED%8C%8C%EC%95%85" aria-hidden="true"><span class="icon icon-link"></span></a>[원인파악]</h2>\n<p>operation not permitted라는 메시지로 보아 권한 문제로 판단됨.</p>\n<h2 id="조치--방안검토"><a href="#%EC%A1%B0%EC%B9%98--%EB%B0%A9%EC%95%88%EA%B2%80%ED%86%A0" aria-hidden="true"><span class="icon icon-link"></span></a>[조치 &#x26; 방안검토]</h2>\n<p>powershell을 관리자권한으로 실행하면 아래와 같이 정상 처리됨</p>\n<pre class="language-powershell line-numbers"><code class="language-powershell"><span class="token function">PS</span> C:\\> corepack enable\n<span class="token function">PS</span> C:\\><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<p>끝</p>\n',lang:"ko",category:["NodeJS","개발환경"],date:"2022-04-10T22:35:00.000Z"}},{node:{id:"88f16e93d454fd860827533a02bc5e96",title:"vue-router 개발자 도구에서 오류",content:'<h2 id="오류"><a href="#%EC%98%A4%EB%A5%98" aria-hidden="true"><span class="icon icon-link"></span></a>[오류]</h2>\n<h3 id="환경"><a href="#%ED%99%98%EA%B2%BD" aria-hidden="true"><span class="icon icon-link"></span></a>환경</h3>\n<p>OS: Windows 10<br>\nVue: 3.2.31<br>\nVue router: 4.0.14  </p>\n<hr>\n<p>vue를 브라우저 개발자 도구(devtools)를 실행시키고 실행하다보면 아래와 같은 오류가 발생한 경우가 나온다.<br>\n(개발자 도구를 실행하지 않은 경우는 발생하지 않음)</p>\n<pre class="language-bash line-numbers"><code class="language-bash">vue-router.esm-bundler.js?6c02:2489 Uncaught <span class="token punctuation">(</span>in promise<span class="token punctuation">)</span> TypeError: api.now is not a <span class="token keyword">function</span><span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<h2 id="원인확인"><a href="#%EC%9B%90%EC%9D%B8%ED%99%95%EC%9D%B8" aria-hidden="true"><span class="icon icon-link"></span></a>[원인확인]</h2>\n<p>버전 문제 이지 않을까 검색을 해보았다. 검색 해본 결과 버전문제가 맞는 듯 했다.</p>\n<h2 id="결론"><a href="#%EA%B2%B0%EB%A1%A0" aria-hidden="true"><span class="icon icon-link"></span></a>[결론]</h2>\n<pre class="language-bash line-numbers"><code class="language-bash"><span class="token function">yarn</span> remove vue-router\nyear <span class="token function">add</span> vue-router@4.0.13<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<p>검색한 내용을 토대로 버전을 이전버전으로 돌리니 개발자도구(devtools)에서도 오류 없이 정상적으로 작동했다.</p>\n<h2 id="참고자료"><a href="#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C" aria-hidden="true"><span class="icon icon-link"></span></a>[참고자료]</h2>\n<p><a href="https://github.com/vuejs/router/issues/1338" target="_blank" rel="nofollow noopener noreferrer">Router not working on 4.0.14 -> Use the vue-devtools stable to solve this #1338</a></p>\n',lang:"ko",category:["FrontEnd","Vue3"],date:"2022-04-09T08:45:25.000Z"}},{node:{id:"1c56346c738325b3a2073ca530abd853",title:"블로그를 시작한 이유와 목표",content:"<p>IT경력도 생각보다 꽤나 오래되었는데도 불구하고, 그 동안 공부를 해왔던것에 대해서 기록이 없다.\n그래서 시간이 지나게되면 까먹기도 하고, 다시 공부를 했었던 것에 대해서 필요한 게 있으면\n또 다시 공부를 해야하거나, 자료를 찾아야 한다. 그러한 시간들이 은근히 적지 않았고, 그럴때마다 시간이 무척이나 아깝고, 나 자신이 한심하게 느껴졌다.</p>\n<p>그래서 계속 정리를 해야하지 하다가 이제서야 시간을 내어서 블로그를 만들고 정리하려고 한다.\n또한 내가 알아가는 것들에 대한 정보도 다른 사람들과 같이 공유하는 것도 이 블로그를 시작하게 된 이유중에 하나다.\n나 또한 공부해가면서 다른 사람들이 공유해준 정보를 바탕으로 성장해왔으니 나 또한 그렇게 하는 것이 맞다고 생각하기 때문이다.</p>\n<p>이제부터 하나씩 정리해가면서 더 이상 해매지 않도록 해야겠다. 글 수준이 엄청 어려운게 아니라, 정말 간단한 팁도 포함할 것 이다.(어려운글은 잘쓰지도 못한다.) 그래서 최소 하루에 한개씩, 글 등록을 일주일에 최소 7개로 목표를 삼고 진행한다!\n내가 당일에 습득한 먼지만한 지식도 올릴 것 이다.</p>\n<p>아자아자 화이팅!</p>\n",lang:"ko",category:["Blog","에세이"],date:"2022-04-05T17:24:25.000Z"}},{node:{id:"dd930f951c4f72cdeb89d95a799779f7",title:"라즈베리파이 하드디스크 온도 확인",content:'<p>Ubuntu Linux 5.4.0-1056-raspi 버전 기준(Rasberry Pi OS 기준)</p>\n<p><a href="https://www.smartmontools.org/" target="_blank" rel="nofollow noopener noreferrer">Smartmontools</a> 이라는 패키지를 설치해야 현재 하드디스크 온도를 확인 할 수 있다.\n패키지를 설치한다.</p>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> smartmontools<span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p>설치후에 실행을 해본다.</p>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">sudo</span> smartctl -A /dev/sda<span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p>결과가 아래와 같이 출력된다.</p>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">sudo</span> smartctl -A /dev/sda\nsmartctl <span class="token number">7.1</span> <span class="token number">2019</span>-12-30 r5022 <span class="token punctuation">[</span>aarch64-linux-5.4.0-1056-raspi<span class="token punctuation">]</span> <span class="token punctuation">(</span>local build<span class="token punctuation">)</span>\nCopyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2002</span>-19, Bruce Allen, Christian Franke, www.smartmontools.org\n\n<span class="token operator">==</span><span class="token operator">=</span> START OF READ SMART DATA SECTION <span class="token operator">==</span><span class="token operator">=</span>\nSMART Attributes Data Structure revision number: <span class="token number">16</span>\nVendor Specific SMART Attributes with Thresholds:\nID<span class="token comment"># ATTRIBUTE_NAME          FLAG     VALUE WORST THRESH TYPE      UPDATED  WHEN_FAILED RAW_VALUE</span>\n  <span class="token number">1</span> Raw_Read_Error_Rate     0x000b   <span class="token number">100</span>   <span class="token number">100</span>   016    Pre-fail  Always       -       <span class="token number">0</span>\n  <span class="token number">2</span> Throughput_Performance  0x0004   <span class="token number">128</span>   <span class="token number">128</span>   054    Old_age   Offline      -       <span class="token number">108</span>\n  <span class="token number">3</span> Spin_Up_Time            0x0007   <span class="token number">154</span>   <span class="token number">154</span>   024    Pre-fail  Always       -       <span class="token number">528</span> <span class="token punctuation">(</span>Average <span class="token number">527</span><span class="token punctuation">)</span>\n  <span class="token number">4</span> Start_Stop_Count        0x0012   <span class="token number">100</span>   <span class="token number">100</span>   000    Old_age   Always       -       <span class="token number">1473</span>\n  <span class="token number">5</span> Reallocated_Sector_Ct   0x0033   <span class="token number">100</span>   <span class="token number">100</span>   005    Pre-fail  Always       -       <span class="token number">0</span>\n  <span class="token number">7</span> Seek_Error_Rate         0x000a   <span class="token number">100</span>   <span class="token number">100</span>   067    Old_age   Always       -       <span class="token number">0</span>\n  <span class="token number">8</span> Seek_Time_Performance   0x0004   <span class="token number">128</span>   <span class="token number">128</span>   020    Old_age   Offline      -       <span class="token number">18</span>\n  <span class="token number">9</span> Power_On_Hours          0x0012   <span class="token number">100</span>   <span class="token number">100</span>   000    Old_age   Always       -       <span class="token number">1036</span>\n <span class="token number">10</span> Spin_Retry_Count        0x0012   <span class="token number">100</span>   <span class="token number">100</span>   060    Old_age   Always       -       <span class="token number">0</span>\n <span class="token number">12</span> Power_Cycle_Count       0x0032   <span class="token number">100</span>   <span class="token number">100</span>   000    Old_age   Always       -       <span class="token number">47</span>\n<span class="token number">192</span> Power-Off_Retract_Count 0x0032   099   099   000    Old_age   Always       -       <span class="token number">1520</span>\n<span class="token number">193</span> Load_Cycle_Count        0x0012   099   099   000    Old_age   Always       -       <span class="token number">1520</span>\n<span class="token number">194</span> Temperature_Celsius     0x0002   <span class="token number">151</span>   <span class="token number">151</span>   000    Old_age   Always       -       <span class="token number">43</span> <span class="token punctuation">(</span>Min/Max <span class="token number">14</span>/56<span class="token punctuation">)</span>\n<span class="token number">196</span> Reallocated_Event_Count 0x0032   <span class="token number">100</span>   <span class="token number">100</span>   000    Old_age   Always       -       <span class="token number">0</span>\n<span class="token number">197</span> Current_Pending_Sector  0x0022   <span class="token number">100</span>   <span class="token number">100</span>   000    Old_age   Always       -       <span class="token number">0</span>\n<span class="token number">198</span> Offline_Uncorrectable   0x0008   <span class="token number">100</span>   <span class="token number">100</span>   000    Old_age   Offline      -       <span class="token number">0</span>\n<span class="token number">199</span> UDMA_CRC_Error_Count    0x000a   <span class="token number">200</span>   <span class="token number">200</span>   000    Old_age   Always       -       <span class="token number">17</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>ID 194번 Temperature_Celsius이 현재 하드디스크 온도이다.</p>\n<pre class="language-bash line-numbers"><code class="language-bash"><span class="token number">194</span> Temperature_Celsius     0x0002   <span class="token number">151</span>   <span class="token number">151</span>   000    Old_age   Always       -       <span class="token number">43</span> <span class="token punctuation">(</span>Min/Max <span class="token number">14</span>/56<span class="token punctuation">)</span><span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p>현재 내 라즈베리파이에 연결된 하드디스크 온도는 43도이다.\n온도만 출력 되도록 보완해서 온도만 출력 하겠다.</p>\n<pre class="language-bash line-numbers"><code class="language-bash"><span class="token function">sudo</span> smartctl -A /dev/sda <span class="token operator">|</span> <span class="token function">grep</span> Temperature_Celsius <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">\'{print $10 " °C"}\'</span>\n<span class="token number">45</span> °C<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<p>현재 하드디스크 온도만 직관적으로 잘 출력된다.</p>\n',lang:"ko",category:["Raspberry Pi","Ubuntu Linux"],date:"2022-04-03T19:06:00.000Z"}},{node:{id:"b222cce552056a4d1515fefb02e4d8e1",title:"라즈베리파이 Ubuntu Linux CPU 온도확인",content:'<p>Ubuntu Linux 5.4.0-1056-raspi 버전 기준(Rasberry Pi OS 기준)</p>\n<pre class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">cat</span> /sys/class/thermal/thermal_zone0/temp\n<span class="token number">42355</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<p>결과가 42355로 나오는데, 1,000을 나누면 현재 온도이다. 현재 내 Rasberry Pi CPU온도는 42.355도 이다.\n보기좋게 출력하기 위해서 아래와 같이 보완했다.</p>\n<pre class="language-bash line-numbers"><code class="language-bash">$  <span class="token function">cat</span> /sys/class/thermal/thermal_zone0/temp <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">\'{print $1/1000 " °C"}\'</span>\n<span class="token number">42.355</span> °C<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span></span></code></pre>\n<p>훨씬 더 직관적이다!</p>\n',lang:"ko",category:["Raspberry Pi","Ubuntu Linux"],date:"2022-04-03T18:10:30.000Z"}},{node:{id:"612bbaeecf240b726e6913aacfad9bf5",title:"PostgreSQL INSERT시 TIMESTAMPTZ 컬럼 UTC로 셋팅",content:'<p>테이블생성 DDL</p>\n<pre class="language-sql line-numbers"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tb_member <span class="token punctuation">(</span>\n\tmember_id uuid <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>\n\tmember_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>\n\teffective_date timestamptz <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>\n\texpiration_date timestamptz <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>\n\t<span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>member_id<span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>글로벌용 프로그램을 개발하다보면 timezone 관련해서 고민이 필요하다.\nexpiration_date 항목에 UTC 9999-12-31 23:59:59.999999 데이터를 집어넣으려고 한다.\n하지만 그냥 insert 할 경우 현재 환경에 셋팅된 시간(나의 경우 GMT+9)으로 들어간다.</p>\n<p>그래서 9999-12-31 23:59:59.999999 이 데이터가 utc라는걸 셋팅해줘야 된다.\n아래의 형태로 형 변환을 하면 된다.</p>\n<pre class="language-sql line-numbers"><code class="language-sql">TO_TIMESTAMP<span class="token punctuation">(</span><span class="token string">\'99991231 235959.999999\'</span><span class="token punctuation">,</span> <span class="token string">\'YYYYMMDD HH24MISS.US\'</span><span class="token punctuation">)</span>::<span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone at <span class="token keyword">time</span> zone <span class="token string">\'utc\'</span><span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p>최종 SQL INSERT</p>\n<pre class="language-sql line-numbers"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_member <span class="token keyword">values</span><span class="token punctuation">(</span>gen_random_uuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">\'기본\'</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TO_TIMESTAMP<span class="token punctuation">(</span><span class="token string">\'99991231 235959.999999\'</span><span class="token punctuation">,</span> <span class="token string">\'YYYYMMDD HH24MISS.US\'</span><span class="token punctuation">)</span>::<span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone at <span class="token keyword">time</span> zone <span class="token string">\'utc\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre>\n<p>[참고자료]<br>\n<a href="https://stackoverflow.com/questions/42684304/how-to-convert-a-string-to-timestamp-in-a-desired-timezone" target="_blank" rel="nofollow noopener noreferrer">how to convert a string to timestamp in a desired timezone - stackoverflow</a></p>\n',lang:"ko",category:["Database","Postgresql"],date:"2022-04-03T17:24:25.000Z"}}]}},l=function(n){var s=n.options;s.__staticData?s.__staticData.data=r:(s.__staticData=t.a.observable({data:r}),s.computed=o({$static:function(){return s.__staticData.data}},s.computed))},c=Object(p.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("Layout",[a("h2",{staticClass:"subtitle"},[n._v("Zerost's Programming Notes")]),n._l(n.$page.posts.edges,(function(s,p){return a("div",{key:p},[a("a",{attrs:{href:"/"+s.node.lang+"/posts/"+s.node.category.map((function(n){return encodeURI(n.replace(/ /g,"-"))})).join("/")+"/"+s.node.title.replace(/ /g,"-")}},[a("h3",{staticClass:"title"},[n._v(n._s(s.node.title))])]),a("div",{staticClass:"post-info"},[a("div",{staticClass:"category"},[n._v("[카테고리] "+n._s(s.node.category.join("/")))]),a("div",{staticClass:"date"},[n._v("[작성시간] "+n._s(s.node.date))])]),a("div",{staticClass:"content",domProps:{textContent:n._s(s.node.content.replace(/(<([^>]+)>)/gi,""))}})])}))],2)}),[],!1,null,"32bcf3c6",null);"function"==typeof e&&e(c),"function"==typeof l&&l(c);s.default=c.exports}}]);