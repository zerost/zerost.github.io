{"hash":"d58beb22d9b3a38b1f81c0b89e7fffe66b876250","data":{"posts":{"edges":[{"node":{"id":"058d9194916c75fe6c1f9d3b45361217","title":"호스트네임변경","content":"<h1 id=\"1-배경\"><a href=\"#1-%EB%B0%B0%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 배경</h1>\n<p>우분투 설치후 기본적으로 호스트네임은 ubuntu로 되어있다. 이걸 내가 사용하는 호스트네임으로 변경하고 싶다.<br>\nubuntu에서 zerost-rpi로 변경할 예정이다.  </p>\n<h3 id=\"--환경\"><a href=\"#--%ED%99%98%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>- 환경</h3>\n<p>Ubuntu 22.04 LTS (GNU/Linux 5.15.0-1011-raspi aarch64)</p>\n<h1 id=\"2-현재-호스트네임-확인\"><a href=\"#2-%ED%98%84%EC%9E%AC-%ED%98%B8%EC%8A%A4%ED%8A%B8%EB%84%A4%EC%9E%84-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 현재 호스트네임 확인</h1>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token function\">hostname</span>\nubuntu<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<h1 id=\"3-호스트네임-변경\"><a href=\"#3-%ED%98%B8%EC%8A%A4%ED%8A%B8%EB%84%A4%EC%9E%84-%EB%B3%80%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 호스트네임 변경</h1>\n<p>내가 변경하고자 하는 zerost-rpi로 변경한다. 아래와 같이 명령어를 실행한다.</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> hostnamectl set-hostname zerost-rpi<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<h1 id=\"4-변경된-호스트네임-확인\"><a href=\"#4-%EB%B3%80%EA%B2%BD%EB%90%9C-%ED%98%B8%EC%8A%A4%ED%8A%B8%EB%84%A4%EC%9E%84-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. 변경된 호스트네임 확인</h1>\n<p>내가 변경한 이름으로 변경완료 확인.</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token function\">hostname</span>\nzerost-rpi<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<h1 id=\"5-결론\"><a href=\"#5-%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. 결론</h1>\n<p>한줄로 간단하게 호스트네임이 변경된다. </p>\n<h1 id=\"9-참조\"><a href=\"#9-%EC%B0%B8%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>9. 참조</h1>\n<p><a href=\"https://pinggoopark.tistory.com/86\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[linux] 우분투 hostname 변경하기 - 이제 막 시작 Blog</a></p>\n","lang":"ko","category":["Linux","설정"],"date":"2022-06-29T21:36:00.000Z"}},{"node":{"id":"ed92af7545f3edd2f877f2fc086d50a0","title":"Apache Commons IO 라이브러리 FilenameUtils","content":"<h1 id=\"1-배경\"><a href=\"#1-%EB%B0%B0%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 배경</h1>\n<p>프로젝트를 수행하다보면 파일관련된 작업이 필요하다. 예를 들면 파일업로드, 첨부파일 다운로드등 처리를 하게 되면 파일명, 확장자, 파일사이즈, 경로등\n처리가 필요하게 된다. 그 때마다 Java에서 지원하는 API를 찾아서, RAW데이터를 받아서 데이터 가공을 해야한다. 가공하는 과정에서 예기치 못하는 오류가 발생할 수 도 있다.\n그래서 데이터 가공하는 과정도 별도로 테스트가 필요한 상황이 된다. 그런데, 이미 이런 기능들을 나만 사용하는 것도 아닐테고, 이미 한참전부터 많은 사람들이 사용하고 있었을 것 같고, 당연히 라이브러리도 있을 것이라고 판단했다. 검색을 했더니 <a href=\"https://commons.apache.org/proper/commons-io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apache Commons IO</a> 라는 라이브러리를 찾았다.<br>\n이번에는 파일의 확장자명을 가져오는 부분이 필요해서 해당 부분을 찾았다.</p>\n<h1 id=\"2-fileutils-class-확인\"><a href=\"#2-fileutils-class-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. FileUtils Class 확인</h1>\n<p><a href=\"https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FilenameUtils.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">File Utils class API</a>를 확인하니 확장자를 가져오는 메소드가 존재한다.</p>\n<blockquote>\n<p>static String <code class=\"language-text\">getExtension(String fileName)</code></p>\n<blockquote>\n<p>Gets the extension of a fileName.</p>\n</blockquote>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>파일명</th>\n<th>리턴확장자명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>foo.txt</td>\n<td>\"txt\"</td>\n</tr>\n<tr>\n<td>a/b/c.jpg</td>\n<td>\"jpg\"</td>\n</tr>\n<tr>\n<td>a/b.txt/c</td>\n<td>\"\"</td>\n</tr>\n<tr>\n<td>a/b/c</td>\n<td>\"\"</td>\n</tr>\n</tbody>\n</table>\n<p>예) </p>\n<pre class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExtension</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\njpg<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"3-결론\"><a href=\"#3-%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 결론</h1>\n<p>이미 개발해놓은 라이브러리를 사용하는 것이 테스트코드를 줄일수 있는 방법중에 하나 일 것 같아서 적용해보았다. 내가 필요한 부분을 그리 어렵게 개발할 수도 있긴 하지만,\n그 동안 많은 사람들이 사용하면서 많은 부분을 보완해가면서 만든 소스를 사용하는 것. 내가 예상하지 못했던 부분까지 생각해서 개발 되어 있을 수도 있으니 사용하는게 좋을 것 같다.\n이런 기능을 개발할 시간에 해당 라이브러리를 적용하고 나는 좀 더 비지니스 개발에 집중하자.</p>\n<h1 id=\"9-참조\"><a href=\"#9-%EC%B0%B8%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>9. 참조</h1>\n<p><a href=\"https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FilenameUtils.html#getExtension-java.lang.String\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FilenameUtils - Apache Commons IO</a></p>\n","lang":"ko","category":["Java","Library"],"date":"2022-06-28T22:29:00.000Z"}},{"node":{"id":"505811fab357630089775ae32ea5d7eb","title":"Vue3 script setup","content":"<h1 id=\"1-script-setup란\"><a href=\"#1-script-setup%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. &#x3C;script setup>란?</h1>\n<p>&#x3C;script setup>은 SFC(Single File Components)내에서 Composition API를 사용하기 위해서 권장되는 구문이다. &#x3C;script> 구문에 비해 몇가지 나은점을 제공한다.</p>\n<p>공식사이트에는 아래와 같은 내용이 있다.</p>\n<ul>\n<li>More succinct code with less boilerplate</li>\n<li>Ability to declare props and emitted events using pure TypeScript</li>\n<li>Better runtime performance (the template is compiled into a render function in the same scope, without an intermediate proxy)</li>\n<li>Better IDE type-inference performance (less work for the language -server to extract types from code)</li>\n</ul>\n<p>개인적으로 느낀바로는 변수나 객체등을 또 다시 return 구문에 입력하지 않아도 됨으로서, return 구문이 비대해지거나 return 기입시 오타등으로 인해서 예기치 않는 오류만 발생하지 않는 것 만으로도 매우 훌륭하다고 느낀다. 코드도 훨씬 깔끔해진다.</p>\n<h1 id=\"2-composition-api와-script-setup-비교\"><a href=\"#2-composition-api%EC%99%80-script-setup-%EB%B9%84%EA%B5%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Composition API와 &#x3C;script setup> 비교</h1>\n<h2 id=\"composition-api\"><a href=\"#composition-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Composition API</h2>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"increment\"</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> reactive <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// don't forget to expose the function as well.</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">,</span>\n      increment\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"script-setup\"><a href=\"#script-setup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>&#x3C;script setup></h2>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> reactive <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"increment\"</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>단순히 count만 증가시키는 모듈이지만 코드 라인수도 줄어들고, 간결하다. &#x3C;script setup>에서 선언한 변수나 함수를 return할 필요 없이 template에서 바로 사용할 수 있다. 변수가 한개 인데도 코드가 많이 줄어든다. 변수 갯수만큼 라인수가 늘어나는거라 복잡도가 높은 변수가 많은 프로그램일수록 소스가 간결해지는 효과는 좋다.</p>\n<h1 id=\"3-using-components\"><a href=\"#3-using-components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Using Components</h1>\n<p>컴포넌트 사용법. 컴포넌트 사용법도 정말 간단하다 단순하게 import만 해주게 되면 template에서 사용 할 수 있다. 기존 Composition API보다 간결하다.</p>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">MyComponent</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./MyComponent.vue'</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">MyComponent</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"dynamic-components\"><a href=\"#dynamic-components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dynamic Components</h2>\n<p>동적으로 조건에따라서 컴포넌트 사용</p>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Foo</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Foo.vue'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Bar</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Bar.vue'</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"Foo\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"someCondition ? Foo : Bar\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"recursive-components\"><a href=\"#recursive-components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Recursive Components</h2>\n<p>컴포넌트 이름이 동일하거나 이름을 변경이 필요하다면 아래와 같이 사용할 수 있다.</p>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">FooBar</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">FooBarChild</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./components'</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<h1 id=\"4-top-level-await\"><a href=\"#4-top-level-await\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Top-level await</h1>\n<p>await 문법도 사용가능하다. 다만, Suspense와 함께 사용되어야 한다.</p>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/post/1</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> r<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"5-typescript-기능\"><a href=\"#5-typescript-%EA%B8%B0%EB%8A%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. TypeScript 기능</h1>\n<p>타입 스크립트도 지원한다. </p>\n<h2 id=\"type-only-propsemit-declarations\"><a href=\"#type-only-propsemit-declarations\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Type-only props/emit declarations</h2>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> defineProps<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> string\n  bar<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> emit <span class=\"token operator\">=</span> defineEmits<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token string\">'update'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"default-props-values-when-using-type-declaration\"><a href=\"#default-props-values-when-using-type-declaration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Default props values when using type declaration</h2>\n<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  msg<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string\n  labels<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token function\">withDefaults</span><span class=\"token punctuation\">(</span>defineProps<span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Props</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">labels</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"6-마치며\"><a href=\"#6-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. 마치며</h1>\n<p>Vue.js 3를 사용하고 있다면 무조건 적용해야 하는 것 같다. 토이프로젝트에  모듈들이 Composition API로 적용되어 있었다. &#x3C;script setup> 부분으로 하나씩 고쳐가고 있는데, 별도로 시간을 들여서 수정할만 하다. 소스가 간결해지는 부분이 참으로 만족스럽다. </p>\n<h1 id=\"9-참조\"><a href=\"#9-%EC%B0%B8%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>9. 참조</h1>\n<ul>\n<li><a href=\"https://vuejs.org/api/sfc-script-setup.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">&#x3C;script setup> - Vue.js 공식사이트</a>  </li>\n<li><a href=\"https://vuejs.org/guide/introduction.html#api-styles\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">API styles - Vue.js 공식사이트</a></li>\n</ul>\n","lang":"ko","category":["FrontEnd","Vue3"],"date":"2022-06-18T09:09:00.000Z"}},{"node":{"id":"154b308fdf4ebfcd2e12ec447e325feb","title":"TypeScript 기본타입","content":"<h1 id=\"1-primitives-type윈시-타입\"><a href=\"#1-primitives-type%EC%9C%88%EC%8B%9C-%ED%83%80%EC%9E%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Primitives Type(윈시 타입)</h1>\n<ul>\n<li>\n<p>string<br>\n기본적인 문자열. \"Hello, world\"와 같은 문자열</p>\n<pre class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> msg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">;</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>number\n자바스크립트에는 int, float형이 있는데 두개를 구분하지 않고 심플하게 number로 사용</p>\n<pre class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> size<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> size2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">;</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>boolean<br>\ntrue와 false 두가지 값이 있음</p>\n<pre class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> isBig<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> isSmall<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<p>변수 선언시(const, let) 타입을 표기를 안하게되면 컴파일러가 알아서 추론을 해서 선언하게 된다. 하지만 명시적으로 표기하는 것이 유지보수시에도 도움이 되고, 선언하지 않을꺼라면 굳이 타입스크립트를 사용하지 않고 Javascript를 사용해도 될 것 같다.</p>\n<pre class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">'this is message'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//string 타입으로 추론 해줌(개인적으로 비추천함)</span>\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//number 타입으로 추론</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<h1 id=\"2-arrays배열\"><a href=\"#2-arrays%EB%B0%B0%EC%97%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Arrays(배열)</h1>\n<p>number형 배열 타입은 number[], string타입은 string[] 으로 선언하면 된다. Array\\<number>나 Array\\<string> 으로 작성해도 된다.</p>\n<pre class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> values<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> values2<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<h1 id=\"3-any\"><a href=\"#3-any\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Any</h1>\n<p>Any타입은 어떠한 값도 다 포함될 수 있는 값이다. Primitives Type이나 Array, 심지어 function까지 모두 다 들어갈수 있는 값이다. 이 타입은 굳이 사용하지 않은 것이 맞는 것 같다. 이걸 사용한다면 굳이 타입스크립트를 사용할 필요가 없는 것이다.</p>\n<pre class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nvalue <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//오류 미발생</span>\n<span class=\"token function-variable function\">value</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//오류 미발생</span>\n<span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//오류 미발생</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"4-function-함수\"><a href=\"#4-function-%ED%95%A8%EC%88%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. function (함수)</h1>\n<p>paramter와 return 타입에 설정가능하다.</p>\n<pre class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//4 출력</span>\n\n<span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token number\">1234</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Paramter타입오류 발생</span>\n<span class=\"token keyword\">const</span> n<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1234'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Return타입 오류 발생</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"5-enums\"><a href=\"#5-enums\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Enums</h1>\n<h2 id=\"숫자-열거형numeric-enums\"><a href=\"#%EC%88%AB%EC%9E%90-%EC%97%B4%EA%B1%B0%ED%98%95numeric-enums\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>숫자 열거형(Numeric enums)</h2>\n<pre class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">{</span>\n  Up <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  Down<span class=\"token punctuation\">,</span>\n  Left<span class=\"token punctuation\">,</span>\n  Right\n<span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  Up을 1로 선언했음. 그 이후에 선언되는 값은 1씩 증가한값이다. 그로 인해서 Down = 2, Left = 3, Right = 4가 된다.</p>\n<pre class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">{</span>\n  Up<span class=\"token punctuation\">,</span>\n  Down<span class=\"token punctuation\">,</span>\n  Left<span class=\"token punctuation\">,</span>\n  Right\n<span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  아무런 값을 셋팅하지 않은 경우는 최상위부터 0으로 시작한다. Up = 0, Down = 1, Left = 2, Right = 3이 된다.</p>\n<pre class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">{</span>\n  Up<span class=\"token punctuation\">,</span>  <span class=\"token comment\">//0</span>\n  Down <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//6</span>\n  Left<span class=\"token punctuation\">,</span> <span class=\"token comment\">//7</span>\n  Right <span class=\"token comment\">//8</span>\n<span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  상위값부터 0으로 셋팅되고, Down = 6으로 셋팅을 할 경우, 그 다음부터 1씩 증가한다. Left = 7, Right = 8이 된다.</p>\n<h2 id=\"문자-열거형string-enums\"><a href=\"#%EB%AC%B8%EC%9E%90-%EC%97%B4%EA%B1%B0%ED%98%95string-enums\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>문자 열거형(String enums)</h2>\n<pre class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">{</span>\n  Up <span class=\"token operator\">=</span> <span class=\"token string\">\"UP\"</span><span class=\"token punctuation\">,</span>\n  Down <span class=\"token operator\">=</span> <span class=\"token string\">\"DOWN\"</span><span class=\"token punctuation\">,</span>\n  Left <span class=\"token operator\">=</span> <span class=\"token string\">\"LEFT\"</span><span class=\"token punctuation\">,</span>\n  Right <span class=\"token operator\">=</span> <span class=\"token string\">\"RIGHT\"</span>\n<span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"이종-열거형heterogeneous-enums\"><a href=\"#%EC%9D%B4%EC%A2%85-%EC%97%B4%EA%B1%B0%ED%98%95heterogeneous-enums\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이종 열거형(Heterogeneous enums)</h2>\n<pre class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">enum</span> BooleanLikeHeterogeneousEnum <span class=\"token punctuation\">{</span>\n  No <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  Yes <span class=\"token operator\">=</span> <span class=\"token string\">\"YES\"</span>\n<span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  값을 숫자형과 문자형을 혼합해서 사용. 굳이 이렇게 사용할 필요는 없고, 권장하지 않는다고 함.</p>\n<h1 id=\"6-마치며\"><a href=\"#6-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. 마치며</h1>\n<p>TypeScript의 타입은 인터페이스, 함수타입, 클래스등 더 많은 타입이 있지만 기본타입에서는 여기까지만 정리하였다. </p>\n<h1 id=\"9-참조\"><a href=\"#9-%EC%B0%B8%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>9. 참조</h1>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Everyday Types - TypeScript 공식홈페이지</a></li>\n<li><a href=\"https://www.inflearn.com/course/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">타입스크립트 시작하기 - 인프런</a></li>\n</ul>\n","lang":"ko","category":["TypeScript"],"date":"2022-06-06T14:42:00.000Z"}},{"node":{"id":"cfde60f01d596c43d45d040fe016c039","title":"TypeScript개념과 설치","content":"<h1 id=\"1-typescript란\"><a href=\"#1-typescript%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. TypeScript란?</h1>\n<p>   타입스크립트(TypeScript)는 자바스크립트의 슈퍼셋인 오픈소스 프로그래밍 언어이다. 마이크로소프트에서 개발, 유지하고 있으며 엄격한 문법을 지원한다. 타입스크립트는 자바스크립트 엔진을 사용하면서 커다란 애플리케이션을 개발할 수 있게 설계된 언어이다. 타입스크립트에서 자신이 원하는 타입을 정의하고 프로그래밍을 하면 자바스크립트로 컴파일되어 실행할 수 있다.  </p>\n<h1 id=\"2-typescript-vs-javascript\"><a href=\"#2-typescript-vs-javascript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. TypeScript vs JavaScript</h1>\n<table>\n<thead>\n<tr>\n<th>분류</th>\n<th>TypeScript</th>\n<th>JavaScript</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Data Type</td>\n<td>Static Type</td>\n<td>Dynamic Type</td>\n</tr>\n<tr>\n<td>CompileTime/RunTime</td>\n<td>CompileTime</td>\n<td>Runtime</td>\n</tr>\n<tr>\n<td>생산성↑</td>\n<td>코드의 양이 많은 경우</td>\n<td>코드의 양이 적은 경우</td>\n</tr>\n<tr>\n<td>타입오류발생</td>\n<td>컴파일</td>\n<td>런타임</td>\n</tr>\n<tr>\n<td>IDE 오류</td>\n<td>잘못된 타입을 사용을 한 경우 .0오류 발생</td>\n<td>오류 발생하지 않음</td>\n</tr>\n<tr>\n<td>IDE 리팩토링</td>\n<td>TYPE이 이미 정해져있기때문에 IDE에서 리팩토링 가능</td>\n<td>IDE에서 지원하는 리팩토링은 불가(가능하더라도 정확하지 않음)</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"3-typescript-설치\"><a href=\"#3-typescript-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. TypeScript 설치</h1>\n<p>npm을 설치한다. 기본적으로 nodejs는 설치되어있어야 한다. npm init -y 명령어 실행</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> init -y\nWrote to C:<span class=\"token punctuation\">\\</span>workspace<span class=\"token punctuation\">\\</span>typescript<span class=\"token punctuation\">\\</span>package.json:\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"typescript\"</span>,\n  <span class=\"token string\">\"version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1.0.0\"</span>,\n  <span class=\"token string\">\"description\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,\n  <span class=\"token string\">\"main\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"index.js\"</span>,\n  <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"test\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"echo <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Error: no test specified<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> &amp;&amp; exit 1\"</span>\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"keywords\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>,\n  <span class=\"token string\">\"author\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,\n  <span class=\"token string\">\"license\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ISC\"</span>\n<span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>package.json 파일이 생성되었다.</p>\n<p>이제 TypeScript를 설치한다.</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> typescript\n\nadded <span class=\"token number\">1</span> package, and audited <span class=\"token number\">2</span> packages <span class=\"token keyword\">in</span> 2s\n\nfound <span class=\"token number\">0</span> vulnerabilities<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"4-typescript-모듈-조회-사이트\"><a href=\"#4-typescript-%EB%AA%A8%EB%93%88-%EC%A1%B0%ED%9A%8C-%EC%82%AC%EC%9D%B4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. TypeScript 모듈 조회 사이트</h1>\n<p><a href=\"https://www.typescriptlang.org/dt/search?search=\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">type search - typescriptlang.org</a></p>\n<p>예) react검색시 아래와같이 조회됨. @types..로 시작하는 모듈이 typescript로 개발된 패키지이다.</p>\n<pre class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i react\n<span class=\"token function\">npm</span> i @types/react --save-dev<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<h1 id=\"5-마치며\"><a href=\"#5-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. 마치며</h1>\n<p>  최근들어 Javascript로 개발된 framework의 문서들에도 타입스크립트의 내용이 점점 추가 되고 있고, 최근 개발된 framework의 소스를 확인해봐도 대부분 타입스크립트로 개발되어 있음을 알 수 있었다. 규모가 있는 프로그램을 개발하려고 한다면 Typescript는 이제 기본이 된듯하다.</p>\n<h1 id=\"6-참조\"><a href=\"#6-%EC%B0%B8%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. 참조</h1>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">타입스크립트 - 위키백과</a></li>\n<li><a href=\"https://any-ting.tistory.com/97\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[TypeScript] TypeScript 개념 및 사용하는 이유</a>  </li>\n<li><a href=\"https://www.inflearn.com/course/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">타입스크립트 시작하기 - 인프런</a></li>\n</ul>\n","lang":"ko","category":["TypeScript"],"date":"2022-05-29T10:33:00.000Z"}}]},"menu":{"edges":[{"node":{"category":["TypeScript"],"lang":"ko"}},{"node":{"category":["TypeScript"],"lang":"ko"}},{"node":{"category":["Raspberry Pi","Ubuntu Linux"],"lang":"ko"}},{"node":{"category":["Raspberry Pi","Ubuntu Linux"],"lang":"ko"}},{"node":{"category":["Raspberry Pi","Ubuntu Linux"],"lang":"ko"}},{"node":{"category":["Raspberry Pi","Ubuntu Linux"],"lang":"ko"}},{"node":{"category":["NodeJS","개발환경"],"lang":"ko"}},{"node":{"category":["Linux","설정"],"lang":"ko"}},{"node":{"category":["Linux","Shell Script"],"lang":"ko"}},{"node":{"category":["Java","Library"],"lang":"ko"}},{"node":{"category":["FrontEnd","Vue3"],"lang":"ko"}},{"node":{"category":["FrontEnd","Vue3"],"lang":"ko"}},{"node":{"category":["FrontEnd","Vue3"],"lang":"ko"}},{"node":{"category":["FrontEnd","Gridsome"],"lang":"ko"}},{"node":{"category":["FrontEnd","Gridsome"],"lang":"ko"}},{"node":{"category":["FrontEnd","Gridsome"],"lang":"ko"}},{"node":{"category":["Database","Postgresql"],"lang":"ko"}},{"node":{"category":["Database","Postgresql"],"lang":"ko"}},{"node":{"category":["Blog","에세이"],"lang":"ko"}},{"node":{"category":["Blog","블로그개발일지"],"lang":"ko"}}]}},"context":{}}